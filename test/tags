!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGTYPE_NONE	../colr.h	/^    ARGTYPE_NONE = -1,$/;"	e	enum:ArgType_t
ArgType	../colr.h	/^} ArgType;$/;"	t	typeref:enum:ArgType_t
ArgType_repr	../colr.c	/^char* ArgType_repr(ArgType type) {$/;"	f
ArgType_t	../colr.h	/^typedef enum ArgType_t {$/;"	g
ArgType_to_str	../colr.c	/^char* ArgType_to_str(ArgType type) {$/;"	f
BACK	../colr.h	/^    BACK = 1,$/;"	e	enum:ArgType_t
BASIC_INVALID	../colr.h	/^    BASIC_INVALID = COLOR_INVALID,$/;"	e	enum:BasicValue_t
BASIC_INVALID	../colr.h	712;"	d
BASIC_NONE	../colr.h	/^    BASIC_NONE = -1,$/;"	e	enum:BasicValue_t
BASIC_NONE	../colr.h	713;"	d
BLACK	../colr.h	/^    BLACK = 0,$/;"	e	enum:BasicValue_t
BLACK	../colr.h	714;"	d
BLUE	../colr.h	/^    BLUE = 4,$/;"	e	enum:BasicValue_t
BLUE	../colr.h	718;"	d
BRIGHT	../colr.h	/^    BRIGHT = 1,$/;"	e	enum:StyleValue_t
BRIGHT	../colr.h	787;"	d
BasicInfo	../colr.h	/^struct BasicInfo {$/;"	s
BasicValue	../colr.h	/^} BasicValue;$/;"	t	typeref:enum:BasicValue_t
BasicValue_from_str	../colr.c	/^BasicValue BasicValue_from_str(const char* arg) {$/;"	f
BasicValue_t	../colr.h	/^typedef enum BasicValue_t {$/;"	g
BasicValue_to_ansi	../colr.c	/^int BasicValue_to_ansi(ArgType type, BasicValue bval) {$/;"	f
CODEX_LEN	../colr.h	110;"	d
CODE_ANY_LEN	../colr.h	137;"	d
CODE_LEN	../colr.h	108;"	d
CODE_RESET_ALL	../colr.h	97;"	d
CODE_RESET_LEN	../colr.h	103;"	d
CODE_RGB_LEN	../colr.h	123;"	d
COLORARG_MARKER	../colr.h	147;"	d
COLORTEXT_MARKER	../colr.h	154;"	d
COLOR_INVALID	../colr.h	159;"	d
COLOR_INVALID_RANGE	../colr.h	161;"	d
COLOR_LEN	../colr.h	120;"	d
COLOR_RGB_LEN	../colr.h	131;"	d
COLR_H	../colr.h	31;"	d
COLR_VERSION	../colr.h	37;"	d
CYAN	../colr.h	/^    CYAN = 6,$/;"	e	enum:BasicValue_t
CYAN	../colr.h	720;"	d
ColorArg	../colr.h	/^struct ColorArg {$/;"	s
ColorArg_free	../colr.c	/^void ColorArg_free(struct ColorArg *p) {$/;"	f
ColorArg_from_BasicValue	../colr.c	/^struct ColorArg ColorArg_from_BasicValue(ArgType type, BasicValue value) {$/;"	f
ColorArg_from_ExtendedValue	../colr.c	/^struct ColorArg ColorArg_from_ExtendedValue(ArgType type, ExtendedValue value) {$/;"	f
ColorArg_from_RGB	../colr.c	/^struct ColorArg ColorArg_from_RGB(ArgType type, struct RGB value) {$/;"	f
ColorArg_from_StyleValue	../colr.c	/^struct ColorArg ColorArg_from_StyleValue(ArgType type, StyleValue value) {$/;"	f
ColorArg_from_str	../colr.c	/^struct ColorArg ColorArg_from_str(ArgType type, char* colorname) {$/;"	f
ColorArg_from_value	../colr.c	/^struct ColorArg ColorArg_from_value(ArgType type, ColorType colrtype, void *p) {$/;"	f
ColorArg_is_invalid	../colr.c	/^bool ColorArg_is_invalid(struct ColorArg carg) {$/;"	f
ColorArg_is_ptr	../colr.c	/^bool ColorArg_is_ptr(void *p) {$/;"	f
ColorArg_is_valid	../colr.c	/^bool ColorArg_is_valid(struct ColorArg carg) {$/;"	f
ColorArg_repr	../colr.c	/^char* ColorArg_repr(struct ColorArg carg) {$/;"	f
ColorArg_to_ptr	../colr.c	/^struct ColorArg *ColorArg_to_ptr(struct ColorArg carg) {$/;"	f
ColorArg_to_str	../colr.c	/^char* ColorArg_to_str(struct ColorArg carg) {$/;"	f
ColorText	../colr.h	/^struct ColorText {$/;"	s
ColorText_free	../colr.c	/^void ColorText_free(struct ColorText *p) {$/;"	f
ColorText_from_values	../colr.c	/^struct ColorText ColorText_from_values(char* text, ...) {$/;"	f
ColorText_is_ptr	../colr.c	/^bool ColorText_is_ptr(void *p) {$/;"	f
ColorText_repr	../colr.c	/^char* ColorText_repr(struct ColorText ctext) {$/;"	f
ColorText_to_ptr	../colr.c	/^struct ColorText *ColorText_to_ptr(struct ColorText ctext) {$/;"	f
ColorText_to_str	../colr.c	/^char* ColorText_to_str(struct ColorText ctext) {$/;"	f
ColorType	../colr.h	/^} ColorType;$/;"	t	typeref:enum:ColorType_t
ColorType_from_str	../colr.c	/^ColorType ColorType_from_str(const char* arg) {$/;"	f
ColorType_is_invalid	../colr.c	/^bool ColorType_is_invalid(ColorType type) {$/;"	f
ColorType_is_valid	../colr.c	/^bool ColorType_is_valid(ColorType type) {$/;"	f
ColorType_repr	../colr.c	/^char* ColorType_repr(ColorType type) {$/;"	f
ColorType_t	../colr.h	/^typedef enum ColorType_t {$/;"	g
ColorValue	../colr.h	/^struct ColorValue {$/;"	s
ColorValue_from_str	../colr.c	/^struct ColorValue ColorValue_from_str(char* s) {$/;"	f
ColorValue_from_value	../colr.c	/^struct ColorValue ColorValue_from_value(ColorType type, void *p) {$/;"	f
ColorValue_is_invalid	../colr.c	/^bool ColorValue_is_invalid(struct ColorValue cval) {$/;"	f
ColorValue_is_valid	../colr.c	/^bool ColorValue_is_valid(struct ColorValue cval) {$/;"	f
ColorValue_repr	../colr.c	/^char* ColorValue_repr(struct ColorValue cval) {$/;"	f
ColorValue_to_str	../colr.c	/^char* ColorValue_to_str(ArgType type, struct ColorValue cval) {$/;"	f
Colr	../colr.h	615;"	d
DIM	../colr.h	/^    DIM = 2,$/;"	e	enum:StyleValue_t
DIM	../colr.h	788;"	d
EXTENDED_INVALID	../colr.h	760;"	d
ExtendedInfo	../colr.h	/^struct ExtendedInfo {$/;"	s
ExtendedValue	../colr.h	/^typedef unsigned char ExtendedValue;$/;"	t
ExtendedValue_from_str	../colr.c	/^int ExtendedValue_from_str(const char* arg) {$/;"	f
FLASH	../colr.h	/^    FLASH = 5,$/;"	e	enum:StyleValue_t
FLASH	../colr.h	791;"	d
FORE	../colr.h	/^    FORE = 0,$/;"	e	enum:ArgType_t
GREEN	../colr.h	/^    GREEN = 2,$/;"	e	enum:BasicValue_t
GREEN	../colr.h	716;"	d
HIGHLIGHT	../colr.h	/^    HIGHLIGHT = 7,$/;"	e	enum:StyleValue_t
HIGHLIGHT	../colr.h	792;"	d
IS_C11	../colr.h	50;"	d
IS_C11	../colr.h	53;"	d
ITALIC	../colr.h	/^    ITALIC = 3,$/;"	e	enum:StyleValue_t
ITALIC	../colr.h	789;"	d
LIGHTBLACK	../colr.h	/^    LIGHTBLACK = 10,$/;"	e	enum:BasicValue_t
LIGHTBLACK	../colr.h	724;"	d
LIGHTBLUE	../colr.h	/^    LIGHTBLUE = 14,$/;"	e	enum:BasicValue_t
LIGHTBLUE	../colr.h	728;"	d
LIGHTCYAN	../colr.h	/^    LIGHTCYAN = 16,$/;"	e	enum:BasicValue_t
LIGHTCYAN	../colr.h	730;"	d
LIGHTGREEN	../colr.h	/^    LIGHTGREEN = 12,$/;"	e	enum:BasicValue_t
LIGHTGREEN	../colr.h	726;"	d
LIGHTMAGENTA	../colr.h	/^    LIGHTMAGENTA = 15,$/;"	e	enum:BasicValue_t
LIGHTMAGENTA	../colr.h	729;"	d
LIGHTRED	../colr.h	/^    LIGHTRED = 11,$/;"	e	enum:BasicValue_t
LIGHTRED	../colr.h	725;"	d
LIGHTWHITE	../colr.h	/^    LIGHTWHITE = 17,$/;"	e	enum:BasicValue_t
LIGHTWHITE	../colr.h	731;"	d
LIGHTYELLOW	../colr.h	/^    LIGHTYELLOW = 13,$/;"	e	enum:BasicValue_t
LIGHTYELLOW	../colr.h	727;"	d
MAGENTA	../colr.h	/^    MAGENTA = 5,$/;"	e	enum:BasicValue_t
MAGENTA	../colr.h	719;"	d
MAX_COLOR_NAME_LEN	../colr.h	140;"	d
M_PI	../colr.h	94;"	d
NC	../colr.h	101;"	d
NORMAL	../colr.h	/^    NORMAL = 22$/;"	e	enum:StyleValue_t
NORMAL	../colr.h	793;"	d
RED	../colr.h	/^    RED = 1,$/;"	e	enum:BasicValue_t
RED	../colr.h	715;"	d
RESET	../colr.h	/^    RESET = 9,$/;"	e	enum:BasicValue_t
RESET	../colr.h	723;"	d
RESET_ALL	../colr.h	/^    RESET_ALL = 0,$/;"	e	enum:StyleValue_t
RESET_ALL	../colr.h	786;"	d
RGB	../colr.h	/^struct RGB {$/;"	s
RGB_from_str	../colr.c	/^int RGB_from_str(const char* arg, struct RGB *rgbval) {$/;"	f
SNOW_COLOR_BOLD	snow.h	110;"	d
SNOW_COLOR_DESC	snow.h	130;"	d
SNOW_COLOR_FAIL	snow.h	122;"	d
SNOW_COLOR_MAYBE	snow.h	126;"	d
SNOW_COLOR_RESET	snow.h	114;"	d
SNOW_COLOR_SUCCESS	snow.h	118;"	d
SNOW_ENABLED	test_ColrC.h	31;"	d
SNOW_H	snow.h	27;"	d
SNOW_USE_FNMATCH	snow.h	73;"	d
SNOW_USE_FNMATCH	snow.h	80;"	d
SNOW_USE_FORK	snow.h	76;"	d
SNOW_USE_FORK	snow.h	83;"	d
SNOW_VERSION	snow.h	95;"	d
STYLE	../colr.h	/^    STYLE = 2,$/;"	e	enum:ArgType_t
STYLE_INVALID	../colr.h	/^    STYLE_INVALID = COLOR_INVALID,$/;"	e	enum:StyleValue_t
STYLE_INVALID	../colr.h	784;"	d
STYLE_LEN	../colr.h	113;"	d
STYLE_NONE	../colr.h	/^    STYLE_NONE = -1,$/;"	e	enum:StyleValue_t
STYLE_NONE	../colr.h	785;"	d
StyleInfo	../colr.h	/^struct StyleInfo {$/;"	s
StyleValue	../colr.h	/^} StyleValue;$/;"	t	typeref:enum:StyleValue_t
StyleValue_from_str	../colr.c	/^StyleValue StyleValue_from_str(const char* arg) {$/;"	f
StyleValue_t	../colr.h	/^typedef enum StyleValue_t {$/;"	g
TEST_COLR_H	test_ColrC.h	16;"	d
TYPE_BASIC	../colr.h	/^    TYPE_BASIC = 0,$/;"	e	enum:ColorType_t
TYPE_EXTENDED	../colr.h	/^    TYPE_EXTENDED = 1,$/;"	e	enum:ColorType_t
TYPE_INVALID	../colr.h	/^    TYPE_INVALID = COLOR_INVALID,$/;"	e	enum:ColorType_t
TYPE_INVALID_EXTENDED_RANGE	../colr.h	/^    TYPE_INVALID_EXTENDED_RANGE = -5,$/;"	e	enum:ColorType_t
TYPE_INVALID_RGB_RANGE	../colr.h	/^    TYPE_INVALID_RGB_RANGE = -4,$/;"	e	enum:ColorType_t
TYPE_INVALID_STYLE	../colr.h	/^    TYPE_INVALID_STYLE = -3,$/;"	e	enum:ColorType_t
TYPE_RGB	../colr.h	/^    TYPE_RGB = 2,$/;"	e	enum:ColorType_t
TYPE_STYLE	../colr.h	/^    TYPE_STYLE = 3,$/;"	e	enum:ColorType_t
UNDERLINE	../colr.h	/^    UNDERLINE = 4,$/;"	e	enum:StyleValue_t
UNDERLINE	../colr.h	790;"	d
UNUSED	../colr.h	/^    UNUSED = 8,$/;"	e	enum:BasicValue_t
UNUSED	../colr.h	722;"	d
WCODE_RESET_ALL	../colr.h	99;"	d
WHITE	../colr.h	/^    WHITE = 7,$/;"	e	enum:BasicValue_t
WHITE	../colr.h	721;"	d
XBLACK	../colr.h	733;"	d
XBLUE	../colr.h	737;"	d
XCYAN	../colr.h	739;"	d
XGREEN	../colr.h	735;"	d
XLIGHTBLACK	../colr.h	741;"	d
XLIGHTBLUE	../colr.h	745;"	d
XLIGHTCYAN	../colr.h	747;"	d
XLIGHTGREEN	../colr.h	743;"	d
XLIGHTMAGENTA	../colr.h	746;"	d
XLIGHTRED	../colr.h	742;"	d
XLIGHTWHITE	../colr.h	748;"	d
XLIGHTYELLOW	../colr.h	744;"	d
XMAGENTA	../colr.h	738;"	d
XRED	../colr.h	734;"	d
XWHITE	../colr.h	740;"	d
XYELLOW	../colr.h	736;"	d
YELLOW	../colr.h	/^    YELLOW = 3,$/;"	e	enum:BasicValue_t
YELLOW	../colr.h	717;"	d
_GNU_SOURCE	../colr.h	33;"	d
_SNOW_OPT_COLOR	snow.h	/^	_SNOW_OPT_COLOR,$/;"	e	enum:__anon1
_SNOW_OPT_CR	snow.h	/^	_SNOW_OPT_CR,$/;"	e	enum:__anon1
_SNOW_OPT_GDB	snow.h	/^	_SNOW_OPT_GDB,$/;"	e	enum:__anon1
_SNOW_OPT_HELP	snow.h	/^	_SNOW_OPT_HELP,$/;"	e	enum:__anon1
_SNOW_OPT_LAST	snow.h	/^	_SNOW_OPT_LAST,$/;"	e	enum:__anon1
_SNOW_OPT_LIST	snow.h	/^	_SNOW_OPT_LIST,$/;"	e	enum:__anon1
_SNOW_OPT_LOG	snow.h	/^	_SNOW_OPT_LOG,$/;"	e	enum:__anon1
_SNOW_OPT_MAYBES	snow.h	/^	_SNOW_OPT_MAYBES,$/;"	e	enum:__anon1
_SNOW_OPT_QUIET	snow.h	/^	_SNOW_OPT_QUIET,$/;"	e	enum:__anon1
_SNOW_OPT_RERUN_FAILED	snow.h	/^	_SNOW_OPT_RERUN_FAILED,$/;"	e	enum:__anon1
_SNOW_OPT_TIMER	snow.h	/^	_SNOW_OPT_TIMER,$/;"	e	enum:__anon1
_SNOW_OPT_VERSION	snow.h	/^	_SNOW_OPT_VERSION,$/;"	e	enum:__anon1
_SNOW_PRINT_CASE	snow.h	/^			_SNOW_PRINT_CASE,$/;"	e	enum:_snow::__anon4::__anon5
_SNOW_PRINT_DESC_BEGIN	snow.h	/^			_SNOW_PRINT_DESC_BEGIN,$/;"	e	enum:_snow::__anon4::__anon5
_SNOW_PRINT_DESC_END	snow.h	/^			_SNOW_PRINT_DESC_END,$/;"	e	enum:_snow::__anon4::__anon5
_colr	../colr.c	/^char* _colr(void *p, ...) {$/;"	f
_colr_join	../colr.c	/^char* _colr_join(void *joinerp, ...) {$/;"	f
_snow	snow.h	/^struct _snow {$/;"	s
_snow_after_each_end	snow.h	/^static void _snow_after_each_end(void) {$/;"	f
_snow_arr	snow.h	/^struct _snow_arr {$/;"	s
_snow_arr_get	snow.h	/^static void *_snow_arr_get(struct _snow_arr *arr, size_t index) {$/;"	f
_snow_arr_grow	snow.h	/^static void _snow_arr_grow(struct _snow_arr *arr, size_t size) {$/;"	f
_snow_arr_init	snow.h	/^static void _snow_arr_init(struct _snow_arr *arr, size_t size) {$/;"	f
_snow_arr_pop	snow.h	/^static void *_snow_arr_pop(struct _snow_arr *arr) {$/;"	f
_snow_arr_push	snow.h	/^static void _snow_arr_push(struct _snow_arr *arr, void *elem) {$/;"	f
_snow_arr_reset	snow.h	/^static void _snow_arr_reset(struct _snow_arr *arr) {$/;"	f
_snow_arr_top	snow.h	/^static void *_snow_arr_top(struct _snow_arr *arr) {$/;"	f
_snow_assert_buf	snow.h	/^static int _snow_assert_buf($/;"	f
_snow_assert_fake	snow.h	/^static int _snow_assert_fake(int invert, ...) {$/;"	f
_snow_assert_str	snow.h	/^static int _snow_assert_str($/;"	f
_snow_before_each_end	snow.h	/^static void _snow_before_each_end(void) {$/;"	f
_snow_case_begin	snow.h	673;"	d
_snow_case_defer_jmp	snow.h	/^static void _snow_case_defer_jmp(void) {$/;"	f
_snow_case_defer_push	snow.h	/^static void _snow_case_defer_push(jmp_buf jmp) {$/;"	f
_snow_case_end	snow.h	/^static void _snow_case_end(int success) {$/;"	f
_snow_define_assertfunc	snow.h	1205;"	d
_snow_desc	snow.h	/^struct _snow_desc {$/;"	s
_snow_desc_begin	snow.h	/^static void _snow_desc_begin(const char *name) {$/;"	f
_snow_desc_end	snow.h	/^static void _snow_desc_end(void) {$/;"	f
_snow_desc_func	snow.h	/^struct _snow_desc_func {$/;"	s
_snow_fail_expl	snow.h	531;"	d
_snow_generic_assert	snow.h	1267;"	d
_snow_generic_assert	snow.h	1280;"	d
_snow_init	snow.h	/^static void _snow_init(void) {$/;"	f
_snow_now	snow.h	/^static double _snow_now(void) {$/;"	f
_snow_opt	snow.h	/^struct _snow_opt {$/;"	s
_snow_opt_bool	snow.h	309;"	d
_snow_opt_default	snow.h	307;"	d
_snow_opt_str	snow.h	313;"	d
_snow_print	snow.h	358;"	d
_snow_print_case_begin	snow.h	/^static void _snow_print_case_begin(void) {$/;"	f
_snow_print_case_failure	snow.h	/^static char *_snow_print_case_failure(void) {$/;"	f
_snow_print_case_success	snow.h	/^static void _snow_print_case_success(void) {$/;"	f
_snow_print_desc_begin	snow.h	/^static void _snow_print_desc_begin(void) {$/;"	f
_snow_print_desc_begin_index	snow.h	/^static void _snow_print_desc_begin_index(size_t index) {$/;"	f
_snow_print_desc_end	snow.h	/^static void _snow_print_desc_end(void) {$/;"	f
_snow_print_timer	snow.h	/^static void _snow_print_timer(double start_time) {$/;"	f
_snow_spaces	snow.h	/^static char *_snow_spaces(int depth) {$/;"	f
_snow_spaces_depth_prev	snow.h	/^static int _snow_spaces_depth_prev = -1;$/;"	v
_snow_usage	snow.h	/^static void _snow_usage(char *argv0)$/;"	f
after_each	snow.h	1162;"	d
after_each	snow.h	37;"	d
after_jmp	snow.h	/^	jmp_buf after_jmp;$/;"	m	struct:_snow_desc
after_jmp_ret	snow.h	/^		jmp_buf after_jmp_ret;$/;"	m	struct:_snow::__anon3
alloc_basic	../colr.h	169;"	d
alloc_extended	../colr.h	177;"	d
alloc_rgb	../colr.h	186;"	d
alloc_style	../colr.h	194;"	d
allocated	snow.h	/^	size_t allocated;$/;"	m	struct:_snow_arr
argeq	../colr.h	205;"	d
array_length	test_ColrC.h	34;"	d
assert	snow.h	1193;"	d
assert	snow.h	41;"	d
assert	test_ColrC.h	30;"	d
assert_ColorType_name_equal	test_ColorType.c	8;"	d	file:
assert_range	test_ColrC.h	36;"	d
asserteq	snow.h	1420;"	d
asserteq	snow.h	51;"	d
asserteq_any	snow.h	1336;"	d
asserteq_buf	snow.h	1330;"	d
asserteq_buf	snow.h	50;"	d
asserteq_dbl	snow.h	1300;"	d
asserteq_dbl	snow.h	45;"	d
asserteq_int	snow.h	1318;"	d
asserteq_int	snow.h	48;"	d
asserteq_ptr	snow.h	1306;"	d
asserteq_ptr	snow.h	46;"	d
asserteq_str	snow.h	1312;"	d
asserteq_str	snow.h	47;"	d
asserteq_uint	snow.h	1324;"	d
asserteq_uint	snow.h	49;"	d
assertneq	snow.h	1435;"	d
assertneq	snow.h	59;"	d
assertneq_any	snow.h	1397;"	d
assertneq_buf	snow.h	1391;"	d
assertneq_buf	snow.h	58;"	d
assertneq_dbl	snow.h	1361;"	d
assertneq_dbl	snow.h	53;"	d
assertneq_int	snow.h	1379;"	d
assertneq_int	snow.h	56;"	d
assertneq_ptr	snow.h	1367;"	d
assertneq_ptr	snow.h	54;"	d
assertneq_str	snow.h	1373;"	d
assertneq_str	snow.h	55;"	d
assertneq_uint	snow.h	1385;"	d
assertneq_uint	snow.h	57;"	d
back	../colr.h	/^    struct ColorArg *back;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
back	../colr.h	460;"	d
back_arg	../colr.h	480;"	d
back_str	../colr.h	499;"	d
basic	../colr.h	/^    BasicValue basic;$/;"	m	struct:ColorValue
basic	../colr.h	215;"	d
basic_names	../colr.c	/^const struct BasicInfo basic_names[] = {$/;"	v	typeref:struct:BasicInfo
basic_names_len	../colr.c	/^const size_t basic_names_len = sizeof(basic_names) \/ sizeof(basic_names[0]);$/;"	v
before_each	snow.h	1154;"	d
before_each	snow.h	36;"	d
before_jmp	snow.h	/^	jmp_buf before_jmp;$/;"	m	struct:_snow_desc
before_jmp_ret	snow.h	/^		jmp_buf before_jmp_ret;$/;"	m	struct:_snow::__anon3
blue	../colr.h	/^    unsigned char blue;$/;"	m	struct:RGB
bool_colr_enum	../colr.h	228;"	d
boolval	snow.h	/^		int boolval;$/;"	m	union:_snow_opt::__anon2
bufs	snow.h	/^	} bufs;$/;"	m	struct:_snow	typeref:struct:_snow::__anon6
char_escape_char	../colr.c	/^char char_escape_char(char c) {$/;"	f
char_should_escape	../colr.c	/^bool char_should_escape(char c) {$/;"	f
color_arg	../colr.h	278;"	d
color_name_is_invalid	../colr.h	673;"	d
color_name_is_valid	../colr.h	644;"	d
color_val	../colr.h	297;"	d
colr	../colr.h	570;"	d
colr_empty_str	../colr.c	/^char* colr_empty_str(void) {$/;"	f
colr_join	../colr.h	597;"	d
colr_repr	../colr.h	327;"	d
current_case	snow.h	/^	} current_case;$/;"	m	struct:_snow	typeref:struct:_snow::__anon3
current_desc	snow.h	/^	struct _snow_desc *current_desc;$/;"	m	struct:_snow	typeref:struct:_snow::_snow_desc
debug_repr	../colr.h	352;"	d
debug_repr	../colr.h	359;"	d
defer	snow.h	1143;"	d
defer	snow.h	35;"	d
defer_jmp_ret	snow.h	/^		jmp_buf defer_jmp_ret;$/;"	m	struct:_snow::__anon3
defers	snow.h	/^		struct _snow_arr defers;$/;"	m	struct:_snow::__anon3	typeref:struct:_snow::__anon3::_snow_arr
desc_funcs	snow.h	/^	struct _snow_arr desc_funcs;$/;"	m	struct:_snow	typeref:struct:_snow::_snow_arr
desc_patterns	snow.h	/^	struct _snow_arr desc_patterns;$/;"	m	struct:_snow	typeref:struct:_snow::_snow_arr
desc_stack	snow.h	/^	struct _snow_arr desc_stack;$/;"	m	struct:_snow	typeref:struct:_snow::_snow_arr
describe	snow.h	1117;"	d
describe	snow.h	31;"	d
describe	test_BasicValue.c	/^describe(BasicValue) {$/;"	f
describe	test_ColorType.c	/^describe(ColorType) {$/;"	f
describe	test_ExtendedValue.c	/^describe(ExtendedValue) {$/;"	f
describe	test_format.c	/^describe(format_functions) {$/;"	f
describe	test_helpers.c	/^describe(helper_functions) {$/;"	f
done_jmp_ret	snow.h	/^		jmp_buf done_jmp_ret;$/;"	m	struct:_snow::__anon3
elem_size	snow.h	/^	size_t elem_size;$/;"	m	struct:_snow_arr
elems	snow.h	/^	char *elems;$/;"	m	struct:_snow_arr
enabled	snow.h	/^	int enabled;$/;"	m	struct:_snow_desc
exit_code	snow.h	/^	int exit_code;$/;"	m	struct:_snow
ext	../colr.h	/^    ExtendedValue ext;$/;"	m	struct:ColorValue
ext	../colr.h	238;"	d
extended_names	../colr.c	/^const struct ExtendedInfo extended_names[] = {$/;"	v	typeref:struct:ExtendedInfo
extended_names_len	../colr.c	/^const size_t extended_names_len = sizeof(extended_names) \/ sizeof(extended_names[0]);$/;"	v
fail	snow.h	1170;"	d
fail	snow.h	40;"	d
file	snow.h	/^		FILE *file;$/;"	m	struct:_snow::__anon4
file_opened	snow.h	/^		int file_opened;$/;"	m	struct:_snow::__anon4
filename	snow.h	/^	const char *filename;$/;"	m	struct:_snow
fore	../colr.h	/^    struct ColorArg *fore;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
fore	../colr.h	391;"	d
fore_arg	../colr.h	409;"	d
fore_str	../colr.h	428;"	d
format_bg	../colr.c	/^void format_bg(char* out, BasicValue value) {$/;"	f
format_bg_RGB	../colr.c	/^void format_bg_RGB(char* out, struct RGB rgb) {$/;"	f
format_bg_rgb	../colr.c	/^void format_bg_rgb(char* out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_bgx	../colr.c	/^void format_bgx(char* out, unsigned char num) {$/;"	f
format_fg	../colr.c	/^void format_fg(char* out, BasicValue value) {$/;"	f
format_fg_RGB	../colr.c	/^void format_fg_RGB(char* out, struct RGB rgb) {$/;"	f
format_fg_rgb	../colr.c	/^void format_fg_rgb(char* out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_fgx	../colr.c	/^void format_fgx(char* out, unsigned char num) {$/;"	f
format_rainbow_fore	../colr.c	/^void format_rainbow_fore(char* out, double freq, size_t step) {$/;"	f
format_style	../colr.c	/^void format_style(char* out, StyleValue style) {$/;"	f
full_name	snow.h	/^	char *full_name;$/;"	m	struct:_snow_desc
full_name_len	snow.h	/^	size_t full_name_len;$/;"	m	struct:_snow_desc
func	snow.h	/^	void (*func)(void);$/;"	m	struct:_snow_desc_func
green	../colr.h	/^    unsigned char green;$/;"	m	struct:RGB
has_after_jmp	snow.h	/^	int has_after_jmp;$/;"	m	struct:_snow_desc
has_before_jmp	snow.h	/^	int has_before_jmp;$/;"	m	struct:_snow_desc
in_after_each	snow.h	/^	int in_after_each;$/;"	m	struct:_snow
in_before_each	snow.h	/^	int in_before_each;$/;"	m	struct:_snow
in_case	snow.h	/^	int in_case;$/;"	m	struct:_snow
in_range	test_ColrC.h	35;"	d
is_bool	snow.h	/^	int is_bool;$/;"	m	struct:_snow_opt
is_overwritten	snow.h	/^	int is_overwritten;$/;"	m	struct:_snow_opt
it	snow.h	1133;"	d
it	snow.h	33;"	d
length	snow.h	/^	size_t length;$/;"	m	struct:_snow_arr
linenum	snow.h	/^	int linenum;$/;"	m	struct:_snow
marker	../colr.h	/^    unsigned int marker;$/;"	m	struct:ColorArg
marker	../colr.h	/^    unsigned int marker;$/;"	m	struct:ColorText
name	../colr.h	/^    char* name;$/;"	m	struct:BasicInfo
name	../colr.h	/^    char* name;$/;"	m	struct:ExtendedInfo
name	../colr.h	/^    char* name;$/;"	m	struct:StyleInfo
name	snow.h	/^		const char *name;$/;"	m	struct:_snow::__anon3
name	snow.h	/^	char *name;$/;"	m	struct:_snow_opt
name	snow.h	/^	const char *name;$/;"	m	struct:_snow_desc
name	snow.h	/^	const char *name;$/;"	m	struct:_snow_desc_func
need_cr	snow.h	/^		int need_cr;$/;"	m	struct:_snow::__anon4
num_success	snow.h	/^	int num_success;$/;"	m	struct:_snow_desc
num_tests	snow.h	/^	int num_tests;$/;"	m	struct:_snow_desc
opts	snow.h	/^	struct _snow_opt opts[_SNOW_OPT_LAST];$/;"	m	struct:_snow	typeref:struct:_snow::_snow_opt
prev_print	snow.h	/^		} prev_print;$/;"	m	struct:_snow::__anon4	typeref:enum:_snow::__anon4::__anon5
print	snow.h	/^	} print;$/;"	m	struct:_snow	typeref:struct:_snow::__anon4
printed	snow.h	/^	int printed;$/;"	m	struct:_snow_desc
printferr	../colr.h	241;"	d
rainbow_fg	../colr.c	/^char* rainbow_fg(const char* s, double freq, size_t offset) {$/;"	f
red	../colr.h	/^    unsigned char red;$/;"	m	struct:RGB
rerun	snow.h	/^		jmp_buf rerun;$/;"	m	struct:_snow::__anon3
rerunning_case	snow.h	/^	int rerunning_case;$/;"	m	struct:_snow
rgb	../colr.h	/^    struct RGB rgb;$/;"	m	struct:ColorValue	typeref:struct:ColorValue::RGB
rgb	../colr.h	253;"	d
rgb_from_str	../colr.c	/^int rgb_from_str(const char* arg, unsigned char* r, unsigned char* g, unsigned char* b) {$/;"	f
shortname	snow.h	/^	char shortname;$/;"	m	struct:_snow_opt
snow_break	snow.h	42;"	d
snow_fail	snow.h	39;"	d
snow_fail	snow.h	517;"	d
snow_fail_update	snow.h	38;"	d
snow_fail_update	snow.h	540;"	d
snow_main	snow.h	1182;"	d
snow_main_decls	snow.h	1176;"	d
snow_main_function	snow.h	/^static int snow_main_function(int argc, char **argv) {$/;"	f
snow_rerun_failed	snow.h	43;"	d
spaces	snow.h	/^		struct _snow_arr spaces;$/;"	m	struct:_snow::__anon6	typeref:struct:_snow::__anon6::_snow_arr
start_time	snow.h	/^		double start_time;$/;"	m	struct:_snow::__anon3
start_time	snow.h	/^	double start_time;$/;"	m	struct:_snow_desc
str_append_reset	../colr.c	/^void str_append_reset(char *s) {$/;"	f
str_copy	../colr.c	/^char* str_copy(char* dest, const char* src, size_t length) {$/;"	f
str_endswith	../colr.c	/^bool str_endswith(const char* str, const char* suf) {$/;"	f
str_is_digits	../colr.c	/^bool str_is_digits(const char* s) {$/;"	f
str_lower	../colr.c	/^void str_lower(char* s) {$/;"	f
str_repr	../colr.c	/^char* str_repr(const char* s) {$/;"	f
str_startswith	../colr.c	/^bool str_startswith(const char* s, const char* prefix) {$/;"	f
str_to_lower	../colr.c	/^void str_to_lower(char* out, const char* s) {$/;"	f
str_to_wide	../colr.c	/^wchar_t* str_to_wide(const char* s) {$/;"	f
streq	../colr.h	265;"	d
strval	snow.h	/^		char *strval;$/;"	m	union:_snow_opt::__anon2
style	../colr.h	/^    StyleValue style;$/;"	m	struct:ColorValue
style	../colr.h	/^    struct ColorArg *style;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
style	../colr.h	518;"	d
style_arg	../colr.h	531;"	d
style_names	../colr.c	/^const struct StyleInfo style_names[] = {$/;"	v	typeref:struct:StyleInfo
style_names_len	../colr.c	/^const size_t style_names_len = sizeof(style_names) \/ sizeof(style_names[0]);$/;"	v
style_str	../colr.h	547;"	d
subdesc	snow.h	1128;"	d
subdesc	snow.h	32;"	d
success	snow.h	/^		int success;$/;"	m	struct:_snow::__anon3
test	snow.h	1141;"	d
test	snow.h	34;"	d
text	../colr.h	/^    char* text;$/;"	m	struct:ColorText
type	../colr.h	/^    ArgType type;$/;"	m	struct:ColorArg
type	../colr.h	/^    ColorType type;$/;"	m	struct:ColorValue
value	../colr.h	/^    BasicValue value;$/;"	m	struct:BasicInfo
value	../colr.h	/^    ExtendedValue value;$/;"	m	struct:ExtendedInfo
value	../colr.h	/^    StyleValue value;$/;"	m	struct:StyleInfo
value	../colr.h	/^    struct ColorValue value;$/;"	m	struct:ColorArg	typeref:struct:ColorArg::ColorValue
wide_to_str	../colr.c	/^char* wide_to_str(const wchar_t* s) {$/;"	f
