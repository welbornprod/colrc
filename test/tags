!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGTYPE_NONE	../colr.h	/^    ARGTYPE_NONE = -1,$/;"	e	enum:ArgType_t
ArgType	../colr.h	/^} ArgType;$/;"	t	typeref:enum:ArgType_t
ArgType_repr	../colr.c	/^char *ArgType_repr(ArgType type) {$/;"	f
ArgType_t	../colr.h	/^typedef enum ArgType_t {$/;"	g
ArgType_to_str	../colr.c	/^char *ArgType_to_str(ArgType type) {$/;"	f
BACK	../colr.h	/^    BACK = 1,$/;"	e	enum:ArgType_t
BASIC_INVALID	../colr.h	/^    BASIC_INVALID = COLOR_INVALID,$/;"	e	enum:BasicValue_t
BASIC_INVALID	../colr.h	592;"	d
BASIC_NONE	../colr.h	/^    BASIC_NONE = -1,$/;"	e	enum:BasicValue_t
BASIC_NONE	../colr.h	593;"	d
BLACK	../colr.h	/^    BLACK = 0,$/;"	e	enum:BasicValue_t
BLACK	../colr.h	594;"	d
BLUE	../colr.h	/^    BLUE = 4,$/;"	e	enum:BasicValue_t
BLUE	../colr.h	598;"	d
BRIGHT	../colr.h	/^    BRIGHT = 1,$/;"	e	enum:StyleValue_t
BRIGHT	../colr.h	660;"	d
BasicInfo	../colr.h	/^struct BasicInfo {$/;"	s
BasicValue	../colr.h	/^} BasicValue;$/;"	t	typeref:enum:BasicValue_t
BasicValue_from_str	../colr.c	/^BasicValue BasicValue_from_str(const char *arg) {$/;"	f
BasicValue_t	../colr.h	/^typedef enum BasicValue_t {$/;"	g
BasicValue_to_ansi	../colr.c	/^int BasicValue_to_ansi(ArgType type, BasicValue bval) {$/;"	f
CODEX_LEN	../colr.h	65;"	d
CODE_ANY_LEN	../colr.h	92;"	d
CODE_LEN	../colr.h	63;"	d
CODE_RESET_ALL	../colr.h	54;"	d
CODE_RESET_LEN	../colr.h	58;"	d
CODE_RGB_LEN	../colr.h	78;"	d
COLORARG_MARKER	../colr.h	102;"	d
COLORTEXT_MARKER	../colr.h	109;"	d
COLOR_INVALID	../colr.h	114;"	d
COLOR_INVALID_RANGE	../colr.h	116;"	d
COLOR_LEN	../colr.h	75;"	d
COLOR_RGB_LEN	../colr.h	86;"	d
COLR_H	../colr.h	20;"	d
COLR_VERSION	../colr.h	26;"	d
CYAN	../colr.h	/^    CYAN = 6,$/;"	e	enum:BasicValue_t
CYAN	../colr.h	600;"	d
ColorArg	../colr.h	/^struct ColorArg {$/;"	s
ColorArg_free	../colr.c	/^void ColorArg_free(struct ColorArg *p) {$/;"	f
ColorArg_from_BasicValue	../colr.c	/^struct ColorArg ColorArg_from_BasicValue(ArgType type, BasicValue value) {$/;"	f
ColorArg_from_ExtendedValue	../colr.c	/^struct ColorArg ColorArg_from_ExtendedValue(ArgType type, ExtendedValue value) {$/;"	f
ColorArg_from_RGB	../colr.c	/^struct ColorArg ColorArg_from_RGB(ArgType type, struct RGB value) {$/;"	f
ColorArg_from_StyleValue	../colr.c	/^struct ColorArg ColorArg_from_StyleValue(ArgType type, StyleValue value) {$/;"	f
ColorArg_from_str	../colr.c	/^struct ColorArg ColorArg_from_str(ArgType type, char *colorname) {$/;"	f
ColorArg_from_value	../colr.c	/^struct ColorArg ColorArg_from_value(ArgType type, ColorType colrtype, void *p) {$/;"	f
ColorArg_is_invalid	../colr.c	/^bool ColorArg_is_invalid(struct ColorArg carg) {$/;"	f
ColorArg_is_ptr	../colr.c	/^bool ColorArg_is_ptr(void *p) {$/;"	f
ColorArg_is_valid	../colr.c	/^bool ColorArg_is_valid(struct ColorArg carg) {$/;"	f
ColorArg_repr	../colr.c	/^char *ColorArg_repr(struct ColorArg carg) {$/;"	f
ColorArg_to_ptr	../colr.c	/^struct ColorArg *ColorArg_to_ptr(struct ColorArg carg) {$/;"	f
ColorArg_to_str	../colr.c	/^char *ColorArg_to_str(struct ColorArg carg) {$/;"	f
ColorText	../colr.h	/^struct ColorText {$/;"	s
ColorText_free	../colr.c	/^void ColorText_free(struct ColorText *p) {$/;"	f
ColorText_from_values	../colr.c	/^struct ColorText ColorText_from_values(char *text, ...) {$/;"	f
ColorText_is_ptr	../colr.c	/^bool ColorText_is_ptr(void *p) {$/;"	f
ColorText_repr	../colr.c	/^char *ColorText_repr(struct ColorText ctext) {$/;"	f
ColorText_to_ptr	../colr.c	/^struct ColorText *ColorText_to_ptr(struct ColorText ctext) {$/;"	f
ColorText_to_str	../colr.c	/^char *ColorText_to_str(struct ColorText ctext) {$/;"	f
ColorType	../colr.h	/^} ColorType;$/;"	t	typeref:enum:ColorType_t
ColorType_from_str	../colr.c	/^ColorType ColorType_from_str(const char *arg) {$/;"	f
ColorType_is_invalid	../colr.c	/^bool ColorType_is_invalid(ColorType type) {$/;"	f
ColorType_is_valid	../colr.c	/^bool ColorType_is_valid(ColorType type) {$/;"	f
ColorType_repr	../colr.c	/^char *ColorType_repr(ColorType type) {$/;"	f
ColorType_t	../colr.h	/^typedef enum ColorType_t {$/;"	g
ColorValue	../colr.h	/^struct ColorValue {$/;"	s
ColorValue_from_str	../colr.c	/^struct ColorValue ColorValue_from_str(char *s) {$/;"	f
ColorValue_from_value	../colr.c	/^struct ColorValue ColorValue_from_value(ColorType type, void *p) {$/;"	f
ColorValue_is_invalid	../colr.c	/^bool ColorValue_is_invalid(struct ColorValue cval) {$/;"	f
ColorValue_is_valid	../colr.c	/^bool ColorValue_is_valid(struct ColorValue cval) {$/;"	f
ColorValue_repr	../colr.c	/^char *ColorValue_repr(struct ColorValue cval) {$/;"	f
ColorValue_to_str	../colr.c	/^char *ColorValue_to_str(ArgType type, struct ColorValue cval) {$/;"	f
Colr	../colr.h	549;"	d
Colr_join	../colr.c	/^char *Colr_join(void *p, ...) {$/;"	f
DIM	../colr.h	/^    DIM = 2,$/;"	e	enum:StyleValue_t
DIM	../colr.h	661;"	d
EXTENDED_INVALID	../colr.h	633;"	d
ExtendedInfo	../colr.h	/^struct ExtendedInfo {$/;"	s
ExtendedValue	../colr.h	/^typedef unsigned char ExtendedValue;$/;"	t
ExtendedValue_from_str	../colr.c	/^int ExtendedValue_from_str(const char *arg) {$/;"	f
FLASH	../colr.h	/^    FLASH = 5,$/;"	e	enum:StyleValue_t
FLASH	../colr.h	664;"	d
FORE	../colr.h	/^    FORE = 0,$/;"	e	enum:ArgType_t
GREEN	../colr.h	/^    GREEN = 2,$/;"	e	enum:BasicValue_t
GREEN	../colr.h	596;"	d
HIGHLIGHT	../colr.h	/^    HIGHLIGHT = 7,$/;"	e	enum:StyleValue_t
HIGHLIGHT	../colr.h	665;"	d
ITALIC	../colr.h	/^    ITALIC = 3,$/;"	e	enum:StyleValue_t
ITALIC	../colr.h	662;"	d
LIGHTBLACK	../colr.h	/^    LIGHTBLACK = 10,$/;"	e	enum:BasicValue_t
LIGHTBLACK	../colr.h	604;"	d
LIGHTBLUE	../colr.h	/^    LIGHTBLUE = 14,$/;"	e	enum:BasicValue_t
LIGHTBLUE	../colr.h	608;"	d
LIGHTCYAN	../colr.h	/^    LIGHTCYAN = 16,$/;"	e	enum:BasicValue_t
LIGHTCYAN	../colr.h	610;"	d
LIGHTGREEN	../colr.h	/^    LIGHTGREEN = 12,$/;"	e	enum:BasicValue_t
LIGHTGREEN	../colr.h	606;"	d
LIGHTMAGENTA	../colr.h	/^    LIGHTMAGENTA = 15,$/;"	e	enum:BasicValue_t
LIGHTMAGENTA	../colr.h	609;"	d
LIGHTRED	../colr.h	/^    LIGHTRED = 11,$/;"	e	enum:BasicValue_t
LIGHTRED	../colr.h	605;"	d
LIGHTWHITE	../colr.h	/^    LIGHTWHITE = 17,$/;"	e	enum:BasicValue_t
LIGHTWHITE	../colr.h	611;"	d
LIGHTYELLOW	../colr.h	/^    LIGHTYELLOW = 13,$/;"	e	enum:BasicValue_t
LIGHTYELLOW	../colr.h	607;"	d
MAGENTA	../colr.h	/^    MAGENTA = 5,$/;"	e	enum:BasicValue_t
MAGENTA	../colr.h	599;"	d
MAX_COLOR_NAME_LEN	../colr.h	95;"	d
M_PI	../colr.h	51;"	d
NC	../colr.h	56;"	d
NORMAL	../colr.h	/^    NORMAL = 22$/;"	e	enum:StyleValue_t
NORMAL	../colr.h	666;"	d
RED	../colr.h	/^    RED = 1,$/;"	e	enum:BasicValue_t
RED	../colr.h	595;"	d
RESET	../colr.h	/^    RESET = 9,$/;"	e	enum:BasicValue_t
RESET	../colr.h	603;"	d
RESET_ALL	../colr.h	/^    RESET_ALL = 0,$/;"	e	enum:StyleValue_t
RESET_ALL	../colr.h	659;"	d
RGB	../colr.h	/^struct RGB {$/;"	s
RGB_from_str	../colr.c	/^int RGB_from_str(const char *arg, struct RGB *rgbval) {$/;"	f
STYLE	../colr.h	/^    STYLE = 2,$/;"	e	enum:ArgType_t
STYLE_INVALID	../colr.h	/^    STYLE_INVALID = COLOR_INVALID,$/;"	e	enum:StyleValue_t
STYLE_INVALID	../colr.h	657;"	d
STYLE_LEN	../colr.h	68;"	d
STYLE_NONE	../colr.h	/^    STYLE_NONE = -1,$/;"	e	enum:StyleValue_t
STYLE_NONE	../colr.h	658;"	d
StyleInfo	../colr.h	/^struct StyleInfo {$/;"	s
StyleValue	../colr.h	/^} StyleValue;$/;"	t	typeref:enum:StyleValue_t
StyleValue_from_str	../colr.c	/^StyleValue StyleValue_from_str(const char *arg) {$/;"	f
StyleValue_t	../colr.h	/^typedef enum StyleValue_t {$/;"	g
TEST_COLR_H	test_colr.h	16;"	d
TYPE_BASIC	../colr.h	/^    TYPE_BASIC = 0,$/;"	e	enum:ColorType_t
TYPE_EXTENDED	../colr.h	/^    TYPE_EXTENDED = 1,$/;"	e	enum:ColorType_t
TYPE_INVALID	../colr.h	/^    TYPE_INVALID = COLOR_INVALID,$/;"	e	enum:ColorType_t
TYPE_INVALID_EXTENDED_RANGE	../colr.h	/^    TYPE_INVALID_EXTENDED_RANGE = -5,$/;"	e	enum:ColorType_t
TYPE_INVALID_RGB_RANGE	../colr.h	/^    TYPE_INVALID_RGB_RANGE = -4,$/;"	e	enum:ColorType_t
TYPE_INVALID_STYLE	../colr.h	/^    TYPE_INVALID_STYLE = -3,$/;"	e	enum:ColorType_t
TYPE_RGB	../colr.h	/^    TYPE_RGB = 2,$/;"	e	enum:ColorType_t
TYPE_STYLE	../colr.h	/^    TYPE_STYLE = 3,$/;"	e	enum:ColorType_t
UNDERLINE	../colr.h	/^    UNDERLINE = 4,$/;"	e	enum:StyleValue_t
UNDERLINE	../colr.h	663;"	d
UNUSED	../colr.h	/^    UNUSED = 8,$/;"	e	enum:BasicValue_t
UNUSED	../colr.h	602;"	d
WHITE	../colr.h	/^    WHITE = 7,$/;"	e	enum:BasicValue_t
WHITE	../colr.h	601;"	d
XBLACK	../colr.h	613;"	d
XBLUE	../colr.h	617;"	d
XCYAN	../colr.h	619;"	d
XGREEN	../colr.h	615;"	d
XLIGHTBLACK	../colr.h	621;"	d
XLIGHTBLUE	../colr.h	625;"	d
XLIGHTCYAN	../colr.h	627;"	d
XLIGHTGREEN	../colr.h	623;"	d
XLIGHTMAGENTA	../colr.h	626;"	d
XLIGHTRED	../colr.h	622;"	d
XLIGHTWHITE	../colr.h	628;"	d
XLIGHTYELLOW	../colr.h	624;"	d
XMAGENTA	../colr.h	618;"	d
XRED	../colr.h	614;"	d
XWHITE	../colr.h	620;"	d
XYELLOW	../colr.h	616;"	d
YELLOW	../colr.h	/^    YELLOW = 3,$/;"	e	enum:BasicValue_t
YELLOW	../colr.h	597;"	d
_GNU_SOURCE	../colr.h	22;"	d
acolrfgrainbow	../colr.c	/^char *acolrfgrainbow(const char *s, double freq, size_t offset) {$/;"	f
alloc_basic	../colr.h	123;"	d
alloc_extended	../colr.h	130;"	d
alloc_rgb	../colr.h	138;"	d
alloc_style	../colr.h	145;"	d
alloc_with_code	../colr.h	153;"	d
alloc_with_codes	../colr.h	160;"	d
alloc_with_rgb	../colr.h	168;"	d
alloc_with_style	../colr.h	176;"	d
argeq	../colr.h	187;"	d
assert_ColorType_name_equal	test_ColorType.c	8;"	d	file:
back	../colr.h	/^    struct ColorArg *back;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
back	../colr.h	452;"	d
back_arg	../colr.h	412;"	d
back_str	../colr.h	463;"	d
basic	../colr.h	/^    BasicValue basic;$/;"	m	struct:ColorValue
basic	../colr.h	194;"	d
basic_names	../colr.c	/^const struct BasicInfo basic_names[] = {$/;"	v	typeref:struct:BasicInfo
basic_names_len	../colr.c	/^const size_t basic_names_len = sizeof(basic_names) \/ sizeof(basic_names[0]);$/;"	v
blue	../colr.h	/^    unsigned char blue;$/;"	m	struct:RGB
bool_colr_enum	../colr.h	207;"	d
cm_test	test_colr.h	37;"	d
color_arg	../colr.h	252;"	d
color_val	../colr.h	271;"	d
colr	../colr.h	537;"	d
colr_empty_str	../colr.c	/^char *colr_empty_str(void) {$/;"	f
colrfgrainbow	../colr.c	/^void colrfgrainbow(char *out, const char *s, double freq, size_t offset) {$/;"	f
debug_repr	../colr.h	322;"	d
debug_repr	../colr.h	329;"	d
ext	../colr.h	/^    ExtendedValue ext;$/;"	m	struct:ColorValue
ext	../colr.h	214;"	d
extended_names	../colr.c	/^const struct ExtendedInfo extended_names[] = {$/;"	v	typeref:struct:ExtendedInfo
extended_names_len	../colr.c	/^const size_t extended_names_len = sizeof(extended_names) \/ sizeof(extended_names[0]);$/;"	v
force_repr	../colr.h	299;"	d
fore	../colr.h	/^    struct ColorArg *fore;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
fore	../colr.h	385;"	d
fore_arg	../colr.h	345;"	d
fore_str	../colr.h	396;"	d
format_bg	../colr.c	/^void format_bg(char *out, BasicValue value) {$/;"	f
format_bg_RGB	../colr.c	/^void format_bg_RGB(char *out, struct RGB rgb) {$/;"	f
format_bg_rgb	../colr.c	/^void format_bg_rgb(char *out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_bgx	../colr.c	/^void format_bgx(char *out, unsigned char num) {$/;"	f
format_fg	../colr.c	/^void format_fg(char *out, BasicValue value) {$/;"	f
format_fg_RGB	../colr.c	/^void format_fg_RGB(char *out, struct RGB rgb) {$/;"	f
format_fg_rgb	../colr.c	/^void format_fg_rgb(char *out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_fgx	../colr.c	/^void format_fgx(char *out, unsigned char num) {$/;"	f
format_rainbow_fore	../colr.c	/^void format_rainbow_fore(char *out, double freq, size_t step) {$/;"	f
format_style	../colr.c	/^void format_style(char *out, StyleValue style) {$/;"	f
green	../colr.h	/^    unsigned char green;$/;"	m	struct:RGB
main	test_colr.c	/^int main(int argc, char *argv[]) {$/;"	f
marker	../colr.h	/^    unsigned int marker;$/;"	m	struct:ColorArg
marker	../colr.h	/^    unsigned int marker;$/;"	m	struct:ColorText
name	../colr.h	/^    char *name;$/;"	m	struct:BasicInfo
name	../colr.h	/^    char *name;$/;"	m	struct:ExtendedInfo
name	../colr.h	/^    char *name;$/;"	m	struct:StyleInfo
printferr	../colr.h	217;"	d
red	../colr.h	/^    unsigned char red;$/;"	m	struct:RGB
return_cm_tests	test_colr.h	28;"	d
rgb	../colr.h	/^    struct RGB rgb;$/;"	m	struct:ColorValue	typeref:struct:ColorValue::RGB
rgb	../colr.h	227;"	d
rgb_from_str	../colr.c	/^int rgb_from_str(const char *arg, unsigned char *r, unsigned char *g, unsigned char *b) {$/;"	f
run_BasicValue_tests	test_BasicValue.c	/^int run_BasicValue_tests(void) {$/;"	f
run_ColorType_tests	test_ColorType.c	/^int run_ColorType_tests(void) {$/;"	f
run_ExtendedValue_tests	test_ExtendedValue.c	/^int run_ExtendedValue_tests(void) {$/;"	f
run_format_bg_tests	test_format.c	/^int run_format_bg_tests(void) {$/;"	f
run_format_fg_tests	test_format.c	/^int run_format_fg_tests(void) {$/;"	f
run_helper_tests	test_helpers.c	/^int run_helper_tests(void) {$/;"	f
runner	test_colr.h	35;"	d
str_copy	../colr.c	/^char *str_copy(char *dest, const char *src, size_t length) {$/;"	f
str_endswith	../colr.c	/^bool str_endswith(const char *str, const char *suf) {$/;"	f
str_lower	../colr.c	/^void str_lower(char *s) {$/;"	f
str_noop	../colr.c	/^char *str_noop(char *s) {$/;"	f
str_startswith	../colr.c	/^bool str_startswith(const char *s, const char *prefix) {$/;"	f
str_tolower	../colr.c	/^void str_tolower(char *out, const char *s) {$/;"	f
streq	../colr.h	239;"	d
style	../colr.h	/^    StyleValue style;$/;"	m	struct:ColorValue
style	../colr.h	/^    struct ColorArg *style;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
style	../colr.h	511;"	d
style_arg	../colr.h	474;"	d
style_names	../colr.c	/^const struct StyleInfo style_names[] = {$/;"	v	typeref:struct:StyleInfo
style_names_len	../colr.c	/^const size_t style_names_len = sizeof(style_names) \/ sizeof(style_names[0]);$/;"	v
style_str	../colr.h	522;"	d
test_BasicValue_from_str	test_BasicValue.c	/^static void test_BasicValue_from_str(void **state) {$/;"	f	file:
test_ColorType_from_str	test_ColorType.c	/^static void test_ColorType_from_str(void **state) {$/;"	f	file:
test_ExtendedValue_from_str	test_ExtendedValue.c	/^static void test_ExtendedValue_from_str(void **state) {$/;"	f	file:
test_format_bg	test_format.c	/^static void test_format_bg(void **state) {$/;"	f	file:
test_format_bg_RGB	test_format.c	/^static void test_format_bg_RGB(void **state) {$/;"	f	file:
test_format_bg_rgb	test_format.c	/^static void test_format_bg_rgb(void **state) {$/;"	f	file:
test_format_bgx	test_format.c	/^static void test_format_bgx(void **state) {$/;"	f	file:
test_format_fg	test_format.c	/^static void test_format_fg(void **state) {$/;"	f	file:
test_str_startswith	test_helpers.c	/^static void test_str_startswith(void **state) {$/;"	f	file:
text	../colr.h	/^    char *text;$/;"	m	struct:ColorText
type	../colr.h	/^    ArgType type;$/;"	m	struct:ColorArg
type	../colr.h	/^    ColorType type;$/;"	m	struct:ColorValue
value	../colr.h	/^    BasicValue value;$/;"	m	struct:BasicInfo
value	../colr.h	/^    ExtendedValue value;$/;"	m	struct:ExtendedInfo
value	../colr.h	/^    StyleValue value;$/;"	m	struct:StyleInfo
value	../colr.h	/^    struct ColorValue value;$/;"	m	struct:ColorArg	typeref:struct:ColorArg::ColorValue
