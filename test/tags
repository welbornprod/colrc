!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLACK	../colr.h	/^    BLACK = 0,$/;"	e	enum:Colors_t
BLUE	../colr.h	/^    BLUE = 4,$/;"	e	enum:Colors_t
BRIGHT	../colr.h	/^    BRIGHT = 1,$/;"	e	enum:Styles_t
CODEX_LEN	../colr.h	184;"	d
CODE_ANY_LEN	../colr.h	203;"	d
CODE_LEN	../colr.h	182;"	d
CODE_RGB_LEN	../colr.h	195;"	d
COLORNAME_BASIC	../colr.h	/^    COLORNAME_BASIC = 0,$/;"	e	enum:ColorNameType_t
COLORNAME_EXTENDED	../colr.h	/^    COLORNAME_EXTENDED = 1,$/;"	e	enum:ColorNameType_t
COLORNAME_INVALID	../colr.h	/^    COLORNAME_INVALID = -2,$/;"	e	enum:ColorNameType_t
COLORNAME_INVALID_EXTENDED_RANGE	../colr.h	/^    COLORNAME_INVALID_EXTENDED_RANGE = -4,$/;"	e	enum:ColorNameType_t
COLORNAME_INVALID_RGB_RANGE	../colr.h	/^    COLORNAME_INVALID_RGB_RANGE = -3,$/;"	e	enum:ColorNameType_t
COLORNAME_RGB	../colr.h	/^    COLORNAME_RGB = 2,$/;"	e	enum:ColorNameType_t
COLORVAL_INVALID	../colr.h	/^const int COLORVAL_INVALID = -2;$/;"	v
COLORVAL_INVALID_RANGE	../colr.h	/^const int COLORVAL_INVALID_RANGE = -1;$/;"	v
COLOR_INVALID	../colr.h	/^    COLOR_INVALID = -2,$/;"	e	enum:Colors_t
COLOR_LEN	../colr.h	192;"	d
COLOR_NONE	../colr.h	/^    COLOR_NONE = -1,$/;"	e	enum:Colors_t
COLOR_RGB_LEN	../colr.h	200;"	d
COLR_H	../colr.h	4;"	d
COLR_VERSION	../colr.h	10;"	d
CYAN	../colr.h	/^    CYAN = 6,$/;"	e	enum:Colors_t
ColorInfo	../colr.h	/^struct ColorInfo {$/;"	s
ColorNameType	../colr.h	/^} ColorNameType;$/;"	t	typeref:enum:ColorNameType_t
ColorNameType_t	../colr.h	/^typedef enum ColorNameType_t {$/;"	g
Colors	../colr.h	/^} Colors;$/;"	t	typeref:enum:Colors_t
Colors_t	../colr.h	/^typedef enum Colors_t {$/;"	g
DIM	../colr.h	/^    DIM = 2,$/;"	e	enum:Styles_t
FLASH	../colr.h	/^    FLASH = 5,$/;"	e	enum:Styles_t
GREEN	../colr.h	/^    GREEN = 2,$/;"	e	enum:Colors_t
HIGHLIGHT	../colr.h	/^    HIGHLIGHT = 7,$/;"	e	enum:Styles_t
ITALIC	../colr.h	/^    ITALIC = 3,$/;"	e	enum:Styles_t
LIGHTBLUE	../colr.h	/^    LIGHTBLUE = 20,$/;"	e	enum:Colors_t
LIGHTCYAN	../colr.h	/^    LIGHTCYAN = 22,$/;"	e	enum:Colors_t
LIGHTGREEN	../colr.h	/^    LIGHTGREEN = 18,$/;"	e	enum:Colors_t
LIGHTMAGENTA	../colr.h	/^    LIGHTMAGENTA = 21,$/;"	e	enum:Colors_t
LIGHTNORMAL	../colr.h	/^    LIGHTNORMAL = 23$/;"	e	enum:Colors_t
LIGHTRED	../colr.h	/^    LIGHTRED = 17,$/;"	e	enum:Colors_t
LIGHTYELLOW	../colr.h	/^    LIGHTYELLOW = 19,$/;"	e	enum:Colors_t
MAGENTA	../colr.h	/^    MAGENTA = 5,$/;"	e	enum:Colors_t
MAX_COLOR_NAME_LEN	../colr.h	205;"	d
M_PI	../colr.h	21;"	d
NORMAL	../colr.h	/^    NORMAL = 22$/;"	e	enum:Styles_t
RED	../colr.h	/^    RED = 1,$/;"	e	enum:Colors_t
RESET	../colr.h	/^    RESET = 9,$/;"	e	enum:Colors_t
RESET_ALL	../colr.h	/^    RESET_ALL = 0,$/;"	e	enum:Styles_t
RGB	../colr.h	/^struct RGB {$/;"	s
STYLE_INVALID	../colr.h	/^    STYLE_INVALID = -2,$/;"	e	enum:Styles_t
STYLE_LEN	../colr.h	187;"	d
STYLE_NONE	../colr.h	/^    STYLE_NONE = -1,$/;"	e	enum:Styles_t
STYLE_RESET_ALL	../colr.h	179;"	d
StyleInfo	../colr.h	/^struct StyleInfo {$/;"	s
Styles	../colr.h	/^} Styles;$/;"	t	typeref:enum:Styles_t
Styles_t	../colr.h	/^typedef enum Styles_t {$/;"	g
UNDERLINE	../colr.h	/^    UNDERLINE = 4,$/;"	e	enum:Styles_t
UNUSED	../colr.h	/^    UNUSED = 8,$/;"	e	enum:Colors_t
WHITE	../colr.h	/^    WHITE = 7,$/;"	e	enum:Colors_t
XBLUE	../colr.h	/^    XBLUE = 13,$/;"	e	enum:Colors_t
XCYAN	../colr.h	/^    XCYAN = 15,$/;"	e	enum:Colors_t
XGREEN	../colr.h	/^    XGREEN = 11,$/;"	e	enum:Colors_t
XMAGENTA	../colr.h	/^    XMAGENTA = 14,$/;"	e	enum:Colors_t
XNORMAL	../colr.h	/^    XNORMAL = 16,$/;"	e	enum:Colors_t
XRED	../colr.h	/^    XRED = 10,$/;"	e	enum:Colors_t
XYELLOW	../colr.h	/^    XYELLOW = 12,$/;"	e	enum:Colors_t
YELLOW	../colr.h	/^    YELLOW = 3,$/;"	e	enum:Colors_t
_GNU_SOURCE	../colr.h	7;"	d
acolrbg	../colr.h	/^acolrbg(const char *s, Colors fore) {$/;"	f
acolrbgx	../colr.h	/^acolrbgx(const char *s, unsigned char num) {$/;"	f
acolrfore	../colr.h	/^acolrfore(const char *s, Colors fore) {$/;"	f
acolrforeRGB	../colr.h	/^acolrforeRGB(const char *s, struct RGB *rgb) {$/;"	f
acolrforerainbow	../colr.h	/^acolrforerainbow(const char *s, double freq, size_t offset) {$/;"	f
acolrforergb	../colr.h	/^acolrforergb(const char *s, unsigned char red, unsigned char green, unsigned char blue) {$/;"	f
acolrforex	../colr.h	/^acolrforex(const char *s, unsigned char num) {$/;"	f
acolrize	../colr.h	/^acolrize(const char *s, Colors fore, Colors back, Styles style) {$/;"	f
acolrizechar	../colr.h	/^acolrizechar(const char c, Colors fore, Colors back, Styles style) {$/;"	f
acolrizex	../colr.h	/^acolrizex($/;"	f
acolrstyle	../colr.h	/^acolrstyle(const char *s, Styles style) {$/;"	f
alloc_with_code	../colr.h	208;"	d
alloc_with_codes	../colr.h	210;"	d
alloc_with_rgb	../colr.h	212;"	d
alloc_with_style	../colr.h	214;"	d
blue	../colr.h	/^    unsigned char blue;$/;"	m	struct:RGB
color	../colr.h	/^    Colors color;$/;"	m	struct:ColorInfo
color_names	../colr.h	/^} color_names[] = {$/;"	v	typeref:struct:ColorInfo
color_names_len	../colr.h	/^size_t color_names_len = sizeof color_names \/ sizeof (struct ColorInfo);$/;"	v
colorname_to_color	../colr.h	/^colorname_to_color(const char *arg) {$/;"	f
colorname_to_color_RGB	../colr.h	/^colorname_to_color_RGB(const char *arg, struct RGB *rgb) {$/;"	f
colorname_to_color_rgb	../colr.h	/^colorname_to_color_rgb(const char *arg, unsigned char *r, unsigned char *g, unsigned char *b) {$/;"	f
colorname_to_colorx	../colr.h	/^colorname_to_colorx(const char *arg) {$/;"	f
colorname_type	../colr.h	/^colorname_type(const char *arg) {$/;"	f
colrbg	../colr.h	/^colrbg(char *out, const char *s, Colors back) {$/;"	f
colrbgRGB	../colr.h	/^colrbgRGB(char *out, const char *s, struct RGB *rgb) {$/;"	f
colrbgcat	../colr.h	/^colrbgcat(char *dest, const char *text, Colors back) {$/;"	f
colrbgrgb	../colr.h	/^colrbgrgb(char *out, const char *s, unsigned char red, unsigned char green, unsigned char blue) {$/;"	f
colrbgx	../colr.h	/^colrbgx(char *out, const char *s, unsigned char num) {$/;"	f
colrfore	../colr.h	/^colrfore(char *out, const char *s, Colors fore) {$/;"	f
colrforeRGB	../colr.h	/^colrforeRGB(char *out, const char *s, struct RGB *rgb) {$/;"	f
colrforecat	../colr.h	/^colrforecat(char *dest, const char *text, Colors fore) {$/;"	f
colrforechar	../colr.h	/^colrforechar(char *out, const char c, Colors fore) {$/;"	f
colrforerainbow	../colr.h	/^colrforerainbow(char *out, const char *s, double freq, size_t offset) {$/;"	f
colrforergb	../colr.h	/^colrforergb(char *out, const char *s, unsigned char red, unsigned char green, unsigned char blue) {$/;"	f
colrforex	../colr.h	/^colrforex(char *out, const char *s, unsigned char num) {$/;"	f
colrize	../colr.h	/^colrize(char *out, const char *s, Colors fore, Colors back, Styles style) {$/;"	f
colrizecat	../colr.h	/^colrizecat(char *dest, const char *s, Colors fore, Colors back, Styles style) {$/;"	f
colrizechar	../colr.h	/^colrizechar(char *out, char c, Colors fore, Colors back, Styles style) {$/;"	f
colrizecharcat	../colr.h	/^colrizecharcat(char *dest, const char c, Colors fore, Colors back, Styles style) {$/;"	f
colrizex	../colr.h	/^colrizex($/;"	f
colrstyle	../colr.h	/^colrstyle(char *out, const char *s, Styles style) {$/;"	f
debug	../colr.h	29;"	d
debug	../colr.h	32;"	d
format_bg	../colr.h	/^format_bg(char *out, Colors value) {$/;"	f
format_bg_RGB	../colr.h	/^format_bg_RGB(char *out, struct RGB *rgb) {$/;"	f
format_bg_rgb	../colr.h	/^format_bg_rgb(char *out, unsigned char red, unsigned char green, unsigned char blue) {$/;"	f
format_bgx	../colr.h	/^format_bgx(char *out, unsigned char num) {$/;"	f
format_fore	../colr.h	/^format_fore(char *out, Colors value) {$/;"	f
format_fore_RGB	../colr.h	/^format_fore_RGB(char *out, struct RGB *rgb) {$/;"	f
format_fore_rgb	../colr.h	/^format_fore_rgb(char *out, unsigned char red, unsigned char green, unsigned char blue) {$/;"	f
format_forex	../colr.h	/^format_forex(char *out, unsigned char num) {$/;"	f
format_rainbow_fore	../colr.h	/^format_rainbow_fore(char *out, double freq, size_t step) {$/;"	f
format_style	../colr.h	/^format_style(char *out, Styles style) {$/;"	f
green	../colr.h	/^    unsigned char green;$/;"	m	struct:RGB
main	test_colr.c	/^int main(int argc, char *argv[]) {$/;"	f
name	../colr.h	/^    char *name;$/;"	m	struct:ColorInfo
name	../colr.h	/^    char *name;$/;"	m	struct:StyleInfo
red	../colr.h	/^    unsigned char red;$/;"	m	struct:RGB
run_colorname_tests	test_colr.c	/^int run_colorname_tests(void) {$/;"	f
run_format_bg_tests	test_colr.c	/^int run_format_bg_tests(void) {$/;"	f
run_format_fore_tests	test_colr.c	/^int run_format_fore_tests(void) {$/;"	f
run_helper_tests	test_colr.c	/^int run_helper_tests(void) {$/;"	f
str_copy	../colr.h	/^str_copy(char *dest, const char *src, size_t length) {$/;"	f
str_startswith	../colr.h	/^str_startswith(const char *s, const char *prefix) {$/;"	f
str_tolower	../colr.h	/^str_tolower(char *out, const char *s) {$/;"	f
streq	../colr.h	36;"	d
style	../colr.h	/^    Styles style;$/;"	m	struct:StyleInfo
style_names	../colr.h	/^} style_names[] = {$/;"	v	typeref:struct:StyleInfo
style_names_len	../colr.h	/^size_t style_names_len = sizeof style_names \/ sizeof (struct StyleInfo);$/;"	v
stylename_to_style	../colr.h	/^stylename_to_style(const char *arg) {$/;"	f
test_colorname_to_color	test_colr.c	/^static void test_colorname_to_color(void **state) {$/;"	f	file:
test_colorname_type	test_colr.c	/^static void test_colorname_type(void **state) {$/;"	f	file:
test_format_bg	test_colr.c	/^static void test_format_bg(void **state) {$/;"	f	file:
test_format_bg_RGB	test_colr.c	/^static void test_format_bg_RGB(void **state) {$/;"	f	file:
test_format_bg_rgb	test_colr.c	/^static void test_format_bg_rgb(void **state) {$/;"	f	file:
test_format_bgx	test_colr.c	/^static void test_format_bgx(void **state) {$/;"	f	file:
test_format_fore	test_colr.c	/^static void test_format_fore(void **state) {$/;"	f	file:
test_str_startswith	test_colr.c	/^static void test_str_startswith(void **state) {$/;"	f	file:
