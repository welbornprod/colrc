!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGTYPE_NONE	colr.h	/^    ARGTYPE_NONE = -1,$/;"	e	enum:ArgType_t
ArgType	colr.h	/^} ArgType;$/;"	t	typeref:enum:ArgType_t
ArgType_repr	colr.c	/^char* ArgType_repr(ArgType type) {$/;"	f
ArgType_t	colr.h	/^typedef enum ArgType_t {$/;"	g
ArgType_to_str	colr.c	/^char* ArgType_to_str(ArgType type) {$/;"	f
BACK	colr.h	/^    BACK = 1,$/;"	e	enum:ArgType_t
BASIC_INVALID	colr.h	/^    BASIC_INVALID = COLOR_INVALID,$/;"	e	enum:BasicValue_t
BASIC_INVALID	colr.h	846;"	d
BASIC_NONE	colr.h	/^    BASIC_NONE = -1,$/;"	e	enum:BasicValue_t
BASIC_NONE	colr.h	847;"	d
BLACK	colr.h	/^    BLACK = 0,$/;"	e	enum:BasicValue_t
BLACK	colr.h	848;"	d
BLUE	colr.h	/^    BLUE = 4,$/;"	e	enum:BasicValue_t
BLUE	colr.h	852;"	d
BRIGHT	colr.h	/^    BRIGHT = 1,$/;"	e	enum:StyleValue_t
BRIGHT	colr.h	936;"	d
BasicInfo	colr.h	/^} BasicInfo;$/;"	t	typeref:struct:BasicInfo_s
BasicInfo_s	colr.h	/^typedef struct BasicInfo_s {$/;"	s
BasicValue	colr.h	/^} BasicValue;$/;"	t	typeref:enum:BasicValue_t
BasicValue_from_str	colr.c	/^BasicValue BasicValue_from_str(const char* arg) {$/;"	f
BasicValue_repr	colr.c	/^char* BasicValue_repr(BasicValue bval) {$/;"	f
BasicValue_t	colr.h	/^typedef enum BasicValue_t {$/;"	g
BasicValue_to_ansi	colr.c	/^int BasicValue_to_ansi(ArgType type, BasicValue bval) {$/;"	f
CODEX_LEN	colr.h	114;"	d
CODE_ANY_LEN	colr.h	137;"	d
CODE_LEN	colr.h	112;"	d
CODE_RESET_ALL	colr.h	100;"	d
CODE_RESET_LEN	colr.h	108;"	d
CODE_RGB_LEN	colr.h	124;"	d
COLORARG_MARKER	colr.h	144;"	d
COLORTEXT_MARKER	colr.h	151;"	d
COLOR_INVALID	colr.h	156;"	d
COLOR_INVALID_RANGE	colr.h	158;"	d
COLOR_LEN	colr.h	122;"	d
COLOR_RGB_LEN	colr.h	131;"	d
COLR_H	colr.h	35;"	d
COLR_TOOL_H	colr_tool.h	15;"	d
COLR_VERSION	colr.h	41;"	d
CYAN	colr.h	/^    CYAN = 6,$/;"	e	enum:BasicValue_t
CYAN	colr.h	854;"	d
ColorArg	colr.h	/^} ColorArg;$/;"	t	typeref:struct:ColorArg_s
ColorArg_empty	colr.c	/^ColorArg ColorArg_empty(void) {$/;"	f
ColorArg_free	colr.c	/^void ColorArg_free(ColorArg *p) {$/;"	f
ColorArg_from_BasicValue	colr.c	/^ColorArg ColorArg_from_BasicValue(ArgType type, BasicValue value) {$/;"	f
ColorArg_from_ExtendedValue	colr.c	/^ColorArg ColorArg_from_ExtendedValue(ArgType type, ExtendedValue value) {$/;"	f
ColorArg_from_RGB	colr.c	/^ColorArg ColorArg_from_RGB(ArgType type, RGB value) {$/;"	f
ColorArg_from_StyleValue	colr.c	/^ColorArg ColorArg_from_StyleValue(ArgType type, StyleValue value) {$/;"	f
ColorArg_from_str	colr.c	/^ColorArg ColorArg_from_str(ArgType type, char* colorname) {$/;"	f
ColorArg_from_value	colr.c	/^ColorArg ColorArg_from_value(ArgType type, ColorType colrtype, void *p) {$/;"	f
ColorArg_is_empty	colr.c	/^bool ColorArg_is_empty(ColorArg carg) {$/;"	f
ColorArg_is_invalid	colr.c	/^bool ColorArg_is_invalid(ColorArg carg) {$/;"	f
ColorArg_is_ptr	colr.c	/^bool ColorArg_is_ptr(void *p) {$/;"	f
ColorArg_is_valid	colr.c	/^bool ColorArg_is_valid(ColorArg carg) {$/;"	f
ColorArg_repr	colr.c	/^char* ColorArg_repr(ColorArg carg) {$/;"	f
ColorArg_s	colr.h	/^typedef struct ColorArg_s {$/;"	s
ColorArg_to_ptr	colr.c	/^ColorArg *ColorArg_to_ptr(ColorArg carg) {$/;"	f
ColorArg_to_str	colr.c	/^char* ColorArg_to_str(ColorArg carg) {$/;"	f
ColorText	colr.h	/^} ColorText;$/;"	t	typeref:struct:ColorText_s
ColorText_free	colr.c	/^void ColorText_free(ColorText *p) {$/;"	f
ColorText_from_values	colr.c	/^ColorText ColorText_from_values(char* text, ...) {$/;"	f
ColorText_is_ptr	colr.c	/^bool ColorText_is_ptr(void *p) {$/;"	f
ColorText_repr	colr.c	/^char* ColorText_repr(ColorText ctext) {$/;"	f
ColorText_s	colr.h	/^typedef struct ColorText_s {$/;"	s
ColorText_to_ptr	colr.c	/^ColorText *ColorText_to_ptr(ColorText ctext) {$/;"	f
ColorText_to_str	colr.c	/^char* ColorText_to_str(ColorText ctext) {$/;"	f
ColorType	colr.h	/^} ColorType;$/;"	t	typeref:enum:ColorType_t
ColorType_from_str	colr.c	/^ColorType ColorType_from_str(const char* arg) {$/;"	f
ColorType_is_invalid	colr.c	/^bool ColorType_is_invalid(ColorType type) {$/;"	f
ColorType_is_valid	colr.c	/^bool ColorType_is_valid(ColorType type) {$/;"	f
ColorType_repr	colr.c	/^char* ColorType_repr(ColorType type) {$/;"	f
ColorType_t	colr.h	/^typedef enum ColorType_t {$/;"	g
ColorValue	colr.h	/^} ColorValue;$/;"	t	typeref:struct:ColorValue_s
ColorValue_empty	colr.c	/^ColorValue ColorValue_empty(void) {$/;"	f
ColorValue_from_str	colr.c	/^ColorValue ColorValue_from_str(char* s) {$/;"	f
ColorValue_from_value	colr.c	/^ColorValue ColorValue_from_value(ColorType type, void *p) {$/;"	f
ColorValue_is_invalid	colr.c	/^bool ColorValue_is_invalid(ColorValue cval) {$/;"	f
ColorValue_is_valid	colr.c	/^bool ColorValue_is_valid(ColorValue cval) {$/;"	f
ColorValue_repr	colr.c	/^char* ColorValue_repr(ColorValue cval) {$/;"	f
ColorValue_s	colr.h	/^typedef struct ColorValue_s {$/;"	s
ColorValue_to_str	colr.c	/^char* ColorValue_to_str(ArgType type, ColorValue cval) {$/;"	f
Colr	colr.h	412;"	d
ColrToolOptions	colr_tool.h	/^} ColrToolOptions;$/;"	t	typeref:struct:ColrToolOptions_s
ColrToolOptions_new	colr_tool.c	/^ColrToolOptions ColrToolOptions_new(void) {$/;"	f
ColrToolOptions_repr	colr_tool.c	/^char* ColrToolOptions_repr(ColrToolOptions colropts) {$/;"	f
ColrToolOptions_s	colr_tool.h	/^typedef struct ColrToolOptions_s {$/;"	s
DIM	colr.h	/^    DIM = 2,$/;"	e	enum:StyleValue_t
DIM	colr.h	937;"	d
ENCIRCLE	colr.h	/^    ENCIRCLE = 52,$/;"	e	enum:StyleValue_t
EXTENDED_INVALID	colr.h	897;"	d
ExtendedInfo	colr.h	/^} ExtendedInfo;$/;"	t	typeref:struct:ExtendedInfo_s
ExtendedInfo_s	colr.h	/^typedef struct ExtendedInfo_s {$/;"	s
ExtendedValue	colr.h	/^typedef unsigned char ExtendedValue;$/;"	t
ExtendedValue_from_RGB	colr.c	/^ExtendedValue ExtendedValue_from_RGB(RGB rgb) {$/;"	f
ExtendedValue_from_hex	colr.c	/^int ExtendedValue_from_hex(const char* hexstr) {$/;"	f
ExtendedValue_from_hex_default	colr.c	/^ExtendedValue ExtendedValue_from_hex_default(const char* hexstr, ExtendedValue default_value) {$/;"	f
ExtendedValue_from_str	colr.c	/^int ExtendedValue_from_str(const char* arg) {$/;"	f
ExtendedValue_repr	colr.c	/^char* ExtendedValue_repr(ExtendedValue eval) {$/;"	f
ExtendedValue_to_str	colr.c	/^char* ExtendedValue_to_str(ExtendedValue eval) {$/;"	f
FLASH	colr.h	/^    FLASH = 5, \/\/ DOS has a "rapid flash" for 6 also.$/;"	e	enum:StyleValue_t
FLASH	colr.h	940;"	d
FORE	colr.h	/^    FORE = 0,$/;"	e	enum:ArgType_t
FRAME	colr.h	/^    FRAME = 51,$/;"	e	enum:StyleValue_t
GREEN	colr.h	/^    GREEN = 2,$/;"	e	enum:BasicValue_t
GREEN	colr.h	850;"	d
HIGHLIGHT	colr.h	/^    HIGHLIGHT = 7,$/;"	e	enum:StyleValue_t
HIGHLIGHT	colr.h	941;"	d
IS_C11	colr.h	54;"	d
IS_C11	colr.h	57;"	d
ITALIC	colr.h	/^    ITALIC = 3,$/;"	e	enum:StyleValue_t
ITALIC	colr.h	938;"	d
LIGHTBLACK	colr.h	/^    LIGHTBLACK = 10,$/;"	e	enum:BasicValue_t
LIGHTBLACK	colr.h	858;"	d
LIGHTBLUE	colr.h	/^    LIGHTBLUE = 14,$/;"	e	enum:BasicValue_t
LIGHTBLUE	colr.h	862;"	d
LIGHTCYAN	colr.h	/^    LIGHTCYAN = 16,$/;"	e	enum:BasicValue_t
LIGHTCYAN	colr.h	864;"	d
LIGHTGREEN	colr.h	/^    LIGHTGREEN = 12,$/;"	e	enum:BasicValue_t
LIGHTGREEN	colr.h	860;"	d
LIGHTMAGENTA	colr.h	/^    LIGHTMAGENTA = 15,$/;"	e	enum:BasicValue_t
LIGHTMAGENTA	colr.h	863;"	d
LIGHTRED	colr.h	/^    LIGHTRED = 11,$/;"	e	enum:BasicValue_t
LIGHTRED	colr.h	859;"	d
LIGHTWHITE	colr.h	/^    LIGHTWHITE = 17,$/;"	e	enum:BasicValue_t
LIGHTWHITE	colr.h	865;"	d
LIGHTYELLOW	colr.h	/^    LIGHTYELLOW = 13,$/;"	e	enum:BasicValue_t
LIGHTYELLOW	colr.h	861;"	d
MAGENTA	colr.h	/^    MAGENTA = 5,$/;"	e	enum:BasicValue_t
MAGENTA	colr.h	853;"	d
MAX_ARG_LEN	colr_tool.h	32;"	d
MAX_ERR_LEN	colr_tool.h	34;"	d
MAX_TEXT_LEN	colr_tool.h	36;"	d
NAME	colr_tool.h	28;"	d
NC	colr.h	104;"	d
NORMAL	colr.h	/^    NORMAL = 22,$/;"	e	enum:StyleValue_t
NORMAL	colr.h	942;"	d
OVERLINE	colr.h	/^    OVERLINE = 53, \/\/ Supported in Konsole.$/;"	e	enum:StyleValue_t
RED	colr.h	/^    RED = 1,$/;"	e	enum:BasicValue_t
RED	colr.h	849;"	d
RESET	colr.h	/^    RESET = 9,$/;"	e	enum:BasicValue_t
RESET	colr.h	857;"	d
RESET_ALL	colr.h	/^    RESET_ALL = 0,$/;"	e	enum:StyleValue_t
RESET_ALL	colr.h	935;"	d
RGB	colr.h	/^} RGB;$/;"	t	typeref:struct:RGB_t
RGB_eq	colr.c	/^bool RGB_eq(RGB a, RGB b) {$/;"	f
RGB_fmter	colr.h	/^typedef void (*RGB_fmter)(char* out, RGB rgb);$/;"	t
RGB_from_hex	colr.c	/^int RGB_from_hex(const char* arg, RGB *rgb) {$/;"	f
RGB_from_hex_default	colr.c	/^RGB RGB_from_hex_default(const char* arg, RGB default_value) {$/;"	f
RGB_from_str	colr.c	/^int RGB_from_str(const char* arg, RGB *rgbval) {$/;"	f
RGB_repr	colr.c	/^char* RGB_repr(RGB rgb) {$/;"	f
RGB_t	colr.h	/^typedef struct RGB_t {$/;"	s
RGB_to_hex	colr.c	/^char* RGB_to_hex(RGB rgb) {$/;"	f
RGB_to_str	colr.c	/^char* RGB_to_str(RGB rgb) {$/;"	f
RGB_to_term_RGB	colr.c	/^RGB RGB_to_term_RGB(RGB rgb) {$/;"	f
STRIKETHRU	colr.h	/^    STRIKETHRU = 9,$/;"	e	enum:StyleValue_t
STYLE	colr.h	/^    STYLE = 2,$/;"	e	enum:ArgType_t
STYLE_INVALID	colr.h	/^    STYLE_INVALID = COLOR_INVALID,$/;"	e	enum:StyleValue_t
STYLE_INVALID	colr.h	933;"	d
STYLE_LEN	colr.h	116;"	d
STYLE_NONE	colr.h	/^    STYLE_NONE = -1,$/;"	e	enum:StyleValue_t
STYLE_NONE	colr.h	934;"	d
StyleInfo	colr.h	/^} StyleInfo;$/;"	t	typeref:struct:StyleInfo_s
StyleInfo_s	colr.h	/^typedef struct StyleInfo_s {$/;"	s
StyleValue	colr.h	/^} StyleValue;$/;"	t	typeref:enum:StyleValue_t
StyleValue_from_str	colr.c	/^StyleValue StyleValue_from_str(const char* arg) {$/;"	f
StyleValue_repr	colr.c	/^char* StyleValue_repr(StyleValue sval) {$/;"	f
StyleValue_t	colr.h	/^typedef enum StyleValue_t {$/;"	g
TYPE_BASIC	colr.h	/^    TYPE_BASIC = 0,$/;"	e	enum:ColorType_t
TYPE_EXTENDED	colr.h	/^    TYPE_EXTENDED = 1,$/;"	e	enum:ColorType_t
TYPE_INVALID	colr.h	/^    TYPE_INVALID = COLOR_INVALID,$/;"	e	enum:ColorType_t
TYPE_INVALID_EXTENDED_RANGE	colr.h	/^    TYPE_INVALID_EXTENDED_RANGE = -5,$/;"	e	enum:ColorType_t
TYPE_INVALID_RGB_RANGE	colr.h	/^    TYPE_INVALID_RGB_RANGE = -4,$/;"	e	enum:ColorType_t
TYPE_INVALID_STYLE	colr.h	/^    TYPE_INVALID_STYLE = -3,$/;"	e	enum:ColorType_t
TYPE_NONE	colr.h	/^    TYPE_NONE = -6,$/;"	e	enum:ColorType_t
TYPE_RGB	colr.h	/^    TYPE_RGB = 2,$/;"	e	enum:ColorType_t
TYPE_STYLE	colr.h	/^    TYPE_STYLE = 3,$/;"	e	enum:ColorType_t
UNDERLINE	colr.h	/^    UNDERLINE = 4,$/;"	e	enum:StyleValue_t
UNDERLINE	colr.h	939;"	d
UNUSED	colr.h	/^    UNUSED = 8,$/;"	e	enum:BasicValue_t
UNUSED	colr.h	856;"	d
VERSION	colr_tool.h	29;"	d
WCODE_RESET_ALL	colr.h	102;"	d
WHITE	colr.h	/^    WHITE = 7,$/;"	e	enum:BasicValue_t
WHITE	colr.h	855;"	d
WNC	colr.h	106;"	d
XBLACK	colr.h	870;"	d
XBLUE	colr.h	874;"	d
XCYAN	colr.h	876;"	d
XGREEN	colr.h	872;"	d
XLIGHTBLACK	colr.h	878;"	d
XLIGHTBLUE	colr.h	882;"	d
XLIGHTCYAN	colr.h	884;"	d
XLIGHTGREEN	colr.h	880;"	d
XLIGHTMAGENTA	colr.h	883;"	d
XLIGHTRED	colr.h	879;"	d
XLIGHTWHITE	colr.h	885;"	d
XLIGHTYELLOW	colr.h	881;"	d
XMAGENTA	colr.h	875;"	d
XRED	colr.h	871;"	d
XWHITE	colr.h	877;"	d
XYELLOW	colr.h	873;"	d
YELLOW	colr.h	/^    YELLOW = 3,$/;"	e	enum:BasicValue_t
YELLOW	colr.h	851;"	d
_GNU_SOURCE	colr.h	37;"	d
_GNU_SOURCE	colr_tool.h	17;"	d
_colr	colr.c	/^char* _colr(void *p, ...) {$/;"	f
_colr_join	colr.c	/^char* _colr_join(void *joinerp, ...) {$/;"	f
_concat	colr.h	1236;"	d
_rainbow	colr.c	/^char* _rainbow(RGB_fmter fmter, const char* s, double freq, size_t offset) {$/;"	f
alloc_basic	colr.h	167;"	d
alloc_extended	colr.h	175;"	d
alloc_rgb	colr.h	184;"	d
alloc_style	colr.h	192;"	d
argeq	colr.h	203;"	d
back	colr.h	/^    ColorArg *back;$/;"	m	struct:ColorText_s
back	colr.h	235;"	d
back	colr_tool.h	/^    ColorArg* back;$/;"	m	struct:ColrToolOptions_s
back_arg	colr.h	255;"	d
back_str	colr.h	274;"	d
basic	colr.h	/^    BasicValue basic;$/;"	m	struct:ColorValue_s
basic	colr.h	284;"	d
basic_names	colr.c	/^const BasicInfo basic_names[] = {$/;"	v
basic_names_len	colr.c	/^const size_t basic_names_len = sizeof(basic_names) \/ sizeof(basic_names[0]);$/;"	v
blue	colr.h	/^    unsigned char blue;$/;"	m	struct:RGB_t
bool_colr_enum	colr.h	297;"	d
char_escape_char	colr.c	/^char char_escape_char(const char c) {$/;"	f
char_in_str	colr.c	/^bool char_in_str(const char c, const char* s) {$/;"	f
char_should_escape	colr.c	/^bool char_should_escape(const char c) {$/;"	f
color_arg	colr.h	310;"	d
color_name_is_invalid	colr.h	375;"	d
color_name_is_valid	colr.h	346;"	d
color_val	colr.h	387;"	d
colr	colr.h	435;"	d
colr_empty_str	colr.c	/^char* colr_empty_str(void) {$/;"	f
colr_istr_either	colr.h	473;"	d
colr_istr_either	colr.h	494;"	d
colr_istreq	colr.h	483;"	d
colr_istreq	colr.h	504;"	d
colr_join	colr.h	462;"	d
colr_max	colr.h	513;"	d
colr_repr	colr.h	564;"	d
colr_str_either	colr.h	533;"	d
colr_streq	colr.h	522;"	d
colr_supports_rgb	colr.c	/^bool colr_supports_rgb(void) {$/;"	f
concat	colr.h	1235;"	d
dbug	colr.h	600;"	d
dbug_repr	colr.h	592;"	d
dbug_repr	colr.h	602;"	d
ext	colr.h	/^    ExtendedValue ext;$/;"	m	struct:ColorValue_s
ext	colr.h	613;"	d
ext_hex	colr.h	623;"	d
ext_hex_or	colr.h	637;"	d
extended_names	colr.c	/^const ExtendedInfo extended_names[] = {$/;"	v
extended_names_len	colr.c	/^const size_t extended_names_len = sizeof(extended_names) \/ sizeof(extended_names[0]);$/;"	v
fore	colr.h	/^    ColorArg *fore;$/;"	m	struct:ColorText_s
fore	colr.h	668;"	d
fore	colr_tool.h	/^    ColorArg* fore;$/;"	m	struct:ColrToolOptions_s
fore_arg	colr.h	686;"	d
fore_str	colr.h	705;"	d
format_bg	colr.c	/^void format_bg(char* out, BasicValue value) {$/;"	f
format_bg_RGB	colr.c	/^void format_bg_RGB(char* out, RGB rgb) {$/;"	f
format_bg_RGB_term	colr.c	/^void format_bg_RGB_term(char* out, RGB rgb) {$/;"	f
format_bg_rgb	colr.c	/^void format_bg_rgb(char* out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_bgx	colr.c	/^void format_bgx(char* out, unsigned char num) {$/;"	f
format_fg	colr.c	/^void format_fg(char* out, BasicValue value) {$/;"	f
format_fg_RGB	colr.c	/^void format_fg_RGB(char* out, RGB rgb) {$/;"	f
format_fg_RGB_term	colr.c	/^void format_fg_RGB_term(char* out, RGB rgb) {$/;"	f
format_fg_rgb	colr.c	/^void format_fg_rgb(char* out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_fgx	colr.c	/^void format_fgx(char* out, unsigned char num) {$/;"	f
format_style	colr.c	/^void format_style(char* out, StyleValue style) {$/;"	f
green	colr.h	/^    unsigned char green;$/;"	m	struct:RGB_t
hex	colr.h	715;"	d
hex_or	colr.h	726;"	d
inline_str_lstrip_char	colr.h	751;"	d
main	colr_tool.c	/^int main(int argc, char* argv[]) {$/;"	f
marker	colr.h	/^    unsigned int marker;$/;"	m	struct:ColorArg_s
marker	colr.h	/^    unsigned int marker;$/;"	m	struct:ColorText_s
name	colr.h	/^    char* name;$/;"	m	struct:BasicInfo_s
name	colr.h	/^    char* name;$/;"	m	struct:ExtendedInfo_s
name	colr.h	/^    char* name;$/;"	m	struct:StyleInfo_s
parse_args	colr_tool.c	/^int parse_args(int argc, char** argv, ColrToolOptions* colropts) {$/;"	f
print_256	colr_tool.c	/^int print_256(bool do_back) {$/;"	f
print_256	colr_tool.h	/^    bool print_256;$/;"	m	struct:ColrToolOptions_s
print_ColorArg_example	colr_tool.h	55;"	d
print_back	colr_tool.h	/^    bool print_back;$/;"	m	struct:ColrToolOptions_s
print_basic	colr_tool.c	/^int print_basic(bool do_back) {$/;"	f
print_basic	colr_tool.h	/^    bool print_basic;$/;"	m	struct:ColrToolOptions_s
print_opts_repr	colr_tool.h	38;"	d
print_rainbow	colr_tool.c	/^int print_rainbow(bool do_back) {$/;"	f
print_rainbow	colr_tool.h	/^    bool print_rainbow;$/;"	m	struct:ColrToolOptions_s
print_repr	colr_tool.h	46;"	d
print_rgb	colr_tool.c	/^int print_rgb(bool do_back, bool term_rgb) {$/;"	f
print_rgb	colr_tool.h	/^    bool print_rgb;$/;"	m	struct:ColrToolOptions_s
print_rgb_term	colr_tool.h	/^    bool print_rgb_term;$/;"	m	struct:ColrToolOptions_s
print_usage	colr_tool.c	/^int print_usage(const char* reason) {$/;"	f
print_usage_full	colr_tool.c	/^int print_usage_full() {$/;"	f
print_version	colr_tool.c	/^int print_version(void) {$/;"	f
printferr	colr.h	729;"	d
rainbow_back	colr_tool.h	/^    bool rainbow_back;$/;"	m	struct:ColrToolOptions_s
rainbow_bg	colr.c	/^char* rainbow_bg(const char* s, double freq, size_t offset) {$/;"	f
rainbow_bg_term	colr.c	/^char* rainbow_bg_term(const char* s, double freq, size_t offset) {$/;"	f
rainbow_fg	colr.c	/^char* rainbow_fg(const char* s, double freq, size_t offset) {$/;"	f
rainbow_fg_term	colr.c	/^char* rainbow_fg_term(const char* s, double freq, size_t offset) {$/;"	f
rainbow_fore	colr_tool.h	/^    bool rainbow_fore;$/;"	m	struct:ColrToolOptions_s
rainbow_step	colr.c	/^RGB rainbow_step(double freq, size_t step) {$/;"	f
read_stdin_arg	colr_tool.c	/^char* read_stdin_arg(void) {$/;"	f
red	colr.h	/^    unsigned char red;$/;"	m	struct:RGB_t
return_on_null	colr_tool.c	12;"	d	file:
rgb	colr.h	/^    RGB rgb;$/;"	m	struct:ColorValue_s
rgb	colr.h	741;"	d
rgb2term_map	colr.c	/^const RGB rgb2term_map[] = {$/;"	v
rgb2term_map_len	colr.c	/^const size_t rgb2term_map_len = sizeof(rgb2term_map) \/ sizeof(rgb2term_map[0]);$/;"	v
rgb_from_hex	colr.c	/^int rgb_from_hex(const char* hexstr, unsigned char* r, unsigned char* g, unsigned char* b) {$/;"	f
rgb_from_str	colr.c	/^int rgb_from_str(const char* arg, unsigned char* r, unsigned char* g, unsigned char* b) {$/;"	f
str_append_reset	colr.c	/^void str_append_reset(char *s) {$/;"	f
str_copy	colr.c	/^char* str_copy(char* dest, const char* src, size_t length) {$/;"	f
str_ends_with	colr.c	/^bool str_ends_with(const char* str, const char* suf) {$/;"	f
str_has_codes	colr.c	/^bool str_has_codes(const char* s) {$/;"	f
str_is_all	colr.c	/^bool str_is_all(const char* s, const char c) {$/;"	f
str_is_digits	colr.c	/^bool str_is_digits(const char* s) {$/;"	f
str_lower	colr.c	/^void str_lower(char* s) {$/;"	f
str_lstrip_chars	colr.c	/^char* str_lstrip_chars(const char* s, const char* chars) {$/;"	f
str_repr	colr.c	/^char* str_repr(const char* s) {$/;"	f
str_starts_with	colr.c	/^bool str_starts_with(const char* s, const char* prefix) {$/;"	f
str_to_lower	colr.c	/^char* str_to_lower(const char* s) {$/;"	f
str_to_wide	colr.c	/^wchar_t* str_to_wide(const char* s) {$/;"	f
style	colr.h	/^    ColorArg *style;$/;"	m	struct:ColorText_s
style	colr.h	/^    StyleValue style;$/;"	m	struct:ColorValue_s
style	colr.h	778;"	d
style	colr_tool.h	/^    ColorArg* style;$/;"	m	struct:ColrToolOptions_s
style_arg	colr.h	791;"	d
style_names	colr.c	/^const StyleInfo style_names[] = {$/;"	v
style_names_len	colr.c	/^const size_t style_names_len = sizeof(style_names) \/ sizeof(style_names[0]);$/;"	v
style_str	colr.h	807;"	d
text	colr.h	/^    char* text;$/;"	m	struct:ColorText_s
text	colr_tool.h	/^    char* text;$/;"	m	struct:ColrToolOptions_s
type	colr.h	/^    ArgType type;$/;"	m	struct:ColorArg_s
type	colr.h	/^    ColorType type;$/;"	m	struct:ColorValue_s
validate_color_arg	colr_tool.c	/^bool validate_color_arg(ColorArg carg, const char* name) {$/;"	f
value	colr.h	/^    BasicValue value;$/;"	m	struct:BasicInfo_s
value	colr.h	/^    ColorValue value;$/;"	m	struct:ColorArg_s
value	colr.h	/^    ExtendedValue value;$/;"	m	struct:ExtendedInfo_s
value	colr.h	/^    StyleValue value;$/;"	m	struct:StyleInfo_s
wide_to_str	colr.c	/^char* wide_to_str(const wchar_t* s) {$/;"	f
