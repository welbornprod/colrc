!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGTYPE_NONE	colr.h	/^    ARGTYPE_NONE = -1,$/;"	e	enum:ArgType_t
ArgType	colr.h	/^} ArgType;$/;"	t	typeref:enum:ArgType_t
ArgType_repr	colr.c	/^char* ArgType_repr(ArgType type) {$/;"	f
ArgType_t	colr.h	/^typedef enum ArgType_t {$/;"	g
ArgType_to_str	colr.c	/^char* ArgType_to_str(ArgType type) {$/;"	f
BACK	colr.h	/^    BACK = 1,$/;"	e	enum:ArgType_t
BASIC_INVALID	colr.h	/^    BASIC_INVALID = COLOR_INVALID,$/;"	e	enum:BasicValue_t
BASIC_INVALID	colr.h	713;"	d
BASIC_NONE	colr.h	/^    BASIC_NONE = -1,$/;"	e	enum:BasicValue_t
BASIC_NONE	colr.h	714;"	d
BLACK	colr.h	/^    BLACK = 0,$/;"	e	enum:BasicValue_t
BLACK	colr.h	715;"	d
BLUE	colr.h	/^    BLUE = 4,$/;"	e	enum:BasicValue_t
BLUE	colr.h	719;"	d
BRIGHT	colr.h	/^    BRIGHT = 1,$/;"	e	enum:StyleValue_t
BRIGHT	colr.h	788;"	d
BasicInfo	colr.h	/^struct BasicInfo {$/;"	s
BasicValue	colr.h	/^} BasicValue;$/;"	t	typeref:enum:BasicValue_t
BasicValue_from_str	colr.c	/^BasicValue BasicValue_from_str(const char* arg) {$/;"	f
BasicValue_t	colr.h	/^typedef enum BasicValue_t {$/;"	g
BasicValue_to_ansi	colr.c	/^int BasicValue_to_ansi(ArgType type, BasicValue bval) {$/;"	f
CODEX_LEN	colr.h	108;"	d
CODE_ANY_LEN	colr.h	135;"	d
CODE_LEN	colr.h	106;"	d
CODE_RESET_ALL	colr.h	96;"	d
CODE_RESET_LEN	colr.h	102;"	d
CODE_RGB_LEN	colr.h	121;"	d
COLORARG_MARKER	colr.h	145;"	d
COLORTEXT_MARKER	colr.h	152;"	d
COLOR_INVALID	colr.h	157;"	d
COLOR_INVALID_RANGE	colr.h	159;"	d
COLOR_LEN	colr.h	118;"	d
COLOR_RGB_LEN	colr.h	129;"	d
COLR_H	colr.h	31;"	d
COLR_TOOL_H	colr_tool.h	15;"	d
COLR_VERSION	colr.h	37;"	d
CYAN	colr.h	/^    CYAN = 6,$/;"	e	enum:BasicValue_t
CYAN	colr.h	721;"	d
ColorArg	colr.h	/^struct ColorArg {$/;"	s
ColorArg_free	colr.c	/^void ColorArg_free(struct ColorArg *p) {$/;"	f
ColorArg_from_BasicValue	colr.c	/^struct ColorArg ColorArg_from_BasicValue(ArgType type, BasicValue value) {$/;"	f
ColorArg_from_ExtendedValue	colr.c	/^struct ColorArg ColorArg_from_ExtendedValue(ArgType type, ExtendedValue value) {$/;"	f
ColorArg_from_RGB	colr.c	/^struct ColorArg ColorArg_from_RGB(ArgType type, struct RGB value) {$/;"	f
ColorArg_from_StyleValue	colr.c	/^struct ColorArg ColorArg_from_StyleValue(ArgType type, StyleValue value) {$/;"	f
ColorArg_from_str	colr.c	/^struct ColorArg ColorArg_from_str(ArgType type, char* colorname) {$/;"	f
ColorArg_from_value	colr.c	/^struct ColorArg ColorArg_from_value(ArgType type, ColorType colrtype, void *p) {$/;"	f
ColorArg_is_invalid	colr.c	/^bool ColorArg_is_invalid(struct ColorArg carg) {$/;"	f
ColorArg_is_ptr	colr.c	/^bool ColorArg_is_ptr(void *p) {$/;"	f
ColorArg_is_valid	colr.c	/^bool ColorArg_is_valid(struct ColorArg carg) {$/;"	f
ColorArg_repr	colr.c	/^char* ColorArg_repr(struct ColorArg carg) {$/;"	f
ColorArg_to_ptr	colr.c	/^struct ColorArg *ColorArg_to_ptr(struct ColorArg carg) {$/;"	f
ColorArg_to_str	colr.c	/^char* ColorArg_to_str(struct ColorArg carg) {$/;"	f
ColorText	colr.h	/^struct ColorText {$/;"	s
ColorText_free	colr.c	/^void ColorText_free(struct ColorText *p) {$/;"	f
ColorText_from_values	colr.c	/^struct ColorText ColorText_from_values(char* text, ...) {$/;"	f
ColorText_is_ptr	colr.c	/^bool ColorText_is_ptr(void *p) {$/;"	f
ColorText_repr	colr.c	/^char* ColorText_repr(struct ColorText ctext) {$/;"	f
ColorText_to_ptr	colr.c	/^struct ColorText *ColorText_to_ptr(struct ColorText ctext) {$/;"	f
ColorText_to_str	colr.c	/^char* ColorText_to_str(struct ColorText ctext) {$/;"	f
ColorType	colr.h	/^} ColorType;$/;"	t	typeref:enum:ColorType_t
ColorType_from_str	colr.c	/^ColorType ColorType_from_str(const char* arg) {$/;"	f
ColorType_is_invalid	colr.c	/^bool ColorType_is_invalid(ColorType type) {$/;"	f
ColorType_is_valid	colr.c	/^bool ColorType_is_valid(ColorType type) {$/;"	f
ColorType_repr	colr.c	/^char* ColorType_repr(ColorType type) {$/;"	f
ColorType_t	colr.h	/^typedef enum ColorType_t {$/;"	g
ColorValue	colr.h	/^struct ColorValue {$/;"	s
ColorValue_from_str	colr.c	/^struct ColorValue ColorValue_from_str(char* s) {$/;"	f
ColorValue_from_value	colr.c	/^struct ColorValue ColorValue_from_value(ColorType type, void *p) {$/;"	f
ColorValue_is_invalid	colr.c	/^bool ColorValue_is_invalid(struct ColorValue cval) {$/;"	f
ColorValue_is_valid	colr.c	/^bool ColorValue_is_valid(struct ColorValue cval) {$/;"	f
ColorValue_repr	colr.c	/^char* ColorValue_repr(struct ColorValue cval) {$/;"	f
ColorValue_to_str	colr.c	/^char* ColorValue_to_str(ArgType type, struct ColorValue cval) {$/;"	f
Colr	colr.h	616;"	d
DIM	colr.h	/^    DIM = 2,$/;"	e	enum:StyleValue_t
DIM	colr.h	789;"	d
EXTENDED_INVALID	colr.h	761;"	d
ExtendedInfo	colr.h	/^struct ExtendedInfo {$/;"	s
ExtendedValue	colr.h	/^typedef unsigned char ExtendedValue;$/;"	t
ExtendedValue_from_str	colr.c	/^int ExtendedValue_from_str(const char* arg) {$/;"	f
FLASH	colr.h	/^    FLASH = 5,$/;"	e	enum:StyleValue_t
FLASH	colr.h	792;"	d
FORE	colr.h	/^    FORE = 0,$/;"	e	enum:ArgType_t
GREEN	colr.h	/^    GREEN = 2,$/;"	e	enum:BasicValue_t
GREEN	colr.h	717;"	d
HIGHLIGHT	colr.h	/^    HIGHLIGHT = 7,$/;"	e	enum:StyleValue_t
HIGHLIGHT	colr.h	793;"	d
IS_C11	colr.h	50;"	d
IS_C11	colr.h	53;"	d
ITALIC	colr.h	/^    ITALIC = 3,$/;"	e	enum:StyleValue_t
ITALIC	colr.h	790;"	d
LIGHTBLACK	colr.h	/^    LIGHTBLACK = 10,$/;"	e	enum:BasicValue_t
LIGHTBLACK	colr.h	725;"	d
LIGHTBLUE	colr.h	/^    LIGHTBLUE = 14,$/;"	e	enum:BasicValue_t
LIGHTBLUE	colr.h	729;"	d
LIGHTCYAN	colr.h	/^    LIGHTCYAN = 16,$/;"	e	enum:BasicValue_t
LIGHTCYAN	colr.h	731;"	d
LIGHTGREEN	colr.h	/^    LIGHTGREEN = 12,$/;"	e	enum:BasicValue_t
LIGHTGREEN	colr.h	727;"	d
LIGHTMAGENTA	colr.h	/^    LIGHTMAGENTA = 15,$/;"	e	enum:BasicValue_t
LIGHTMAGENTA	colr.h	730;"	d
LIGHTRED	colr.h	/^    LIGHTRED = 11,$/;"	e	enum:BasicValue_t
LIGHTRED	colr.h	726;"	d
LIGHTWHITE	colr.h	/^    LIGHTWHITE = 17,$/;"	e	enum:BasicValue_t
LIGHTWHITE	colr.h	732;"	d
LIGHTYELLOW	colr.h	/^    LIGHTYELLOW = 13,$/;"	e	enum:BasicValue_t
LIGHTYELLOW	colr.h	728;"	d
MAGENTA	colr.h	/^    MAGENTA = 5,$/;"	e	enum:BasicValue_t
MAGENTA	colr.h	720;"	d
MAX_ARG_LEN	colr_tool.h	31;"	d
MAX_COLOR_NAME_LEN	colr.h	138;"	d
MAX_ERR_LEN	colr_tool.h	33;"	d
MAX_TEXT_LEN	colr_tool.h	35;"	d
M_PI	colr.h	93;"	d
NAME	colr_tool.h	27;"	d
NC	colr.h	100;"	d
NORMAL	colr.h	/^    NORMAL = 22$/;"	e	enum:StyleValue_t
NORMAL	colr.h	794;"	d
RED	colr.h	/^    RED = 1,$/;"	e	enum:BasicValue_t
RED	colr.h	716;"	d
RESET	colr.h	/^    RESET = 9,$/;"	e	enum:BasicValue_t
RESET	colr.h	724;"	d
RESET_ALL	colr.h	/^    RESET_ALL = 0,$/;"	e	enum:StyleValue_t
RESET_ALL	colr.h	787;"	d
RGB	colr.h	/^struct RGB {$/;"	s
RGB_fmter	colr.h	/^typedef void (*RGB_fmter)(char* out, struct RGB rgb);$/;"	t
RGB_from_hex	colr.c	/^int RGB_from_hex(const char* arg, struct RGB *rgb) {$/;"	f
RGB_from_str	colr.c	/^int RGB_from_str(const char* arg, struct RGB *rgbval) {$/;"	f
RGB_repr	colr.c	/^char* RGB_repr(struct RGB rgb) {$/;"	f
RGB_to_hex	colr.c	/^char* RGB_to_hex(struct RGB rgb) {$/;"	f
RGB_to_term_RGB	colr.c	/^struct RGB RGB_to_term_RGB(struct RGB rgb) {$/;"	f
STYLE	colr.h	/^    STYLE = 2,$/;"	e	enum:ArgType_t
STYLE_INVALID	colr.h	/^    STYLE_INVALID = COLOR_INVALID,$/;"	e	enum:StyleValue_t
STYLE_INVALID	colr.h	785;"	d
STYLE_LEN	colr.h	111;"	d
STYLE_NONE	colr.h	/^    STYLE_NONE = -1,$/;"	e	enum:StyleValue_t
STYLE_NONE	colr.h	786;"	d
StyleInfo	colr.h	/^struct StyleInfo {$/;"	s
StyleValue	colr.h	/^} StyleValue;$/;"	t	typeref:enum:StyleValue_t
StyleValue_from_str	colr.c	/^StyleValue StyleValue_from_str(const char* arg) {$/;"	f
StyleValue_t	colr.h	/^typedef enum StyleValue_t {$/;"	g
TYPE_BASIC	colr.h	/^    TYPE_BASIC = 0,$/;"	e	enum:ColorType_t
TYPE_EXTENDED	colr.h	/^    TYPE_EXTENDED = 1,$/;"	e	enum:ColorType_t
TYPE_INVALID	colr.h	/^    TYPE_INVALID = COLOR_INVALID,$/;"	e	enum:ColorType_t
TYPE_INVALID_EXTENDED_RANGE	colr.h	/^    TYPE_INVALID_EXTENDED_RANGE = -5,$/;"	e	enum:ColorType_t
TYPE_INVALID_RGB_RANGE	colr.h	/^    TYPE_INVALID_RGB_RANGE = -4,$/;"	e	enum:ColorType_t
TYPE_INVALID_STYLE	colr.h	/^    TYPE_INVALID_STYLE = -3,$/;"	e	enum:ColorType_t
TYPE_RGB	colr.h	/^    TYPE_RGB = 2,$/;"	e	enum:ColorType_t
TYPE_STYLE	colr.h	/^    TYPE_STYLE = 3,$/;"	e	enum:ColorType_t
UNDERLINE	colr.h	/^    UNDERLINE = 4,$/;"	e	enum:StyleValue_t
UNDERLINE	colr.h	791;"	d
UNUSED	colr.h	/^    UNUSED = 8,$/;"	e	enum:BasicValue_t
UNUSED	colr.h	723;"	d
VERSION	colr_tool.h	28;"	d
WCODE_RESET_ALL	colr.h	98;"	d
WHITE	colr.h	/^    WHITE = 7,$/;"	e	enum:BasicValue_t
WHITE	colr.h	722;"	d
XBLACK	colr.h	734;"	d
XBLUE	colr.h	738;"	d
XCYAN	colr.h	740;"	d
XGREEN	colr.h	736;"	d
XLIGHTBLACK	colr.h	742;"	d
XLIGHTBLUE	colr.h	746;"	d
XLIGHTCYAN	colr.h	748;"	d
XLIGHTGREEN	colr.h	744;"	d
XLIGHTMAGENTA	colr.h	747;"	d
XLIGHTRED	colr.h	743;"	d
XLIGHTWHITE	colr.h	749;"	d
XLIGHTYELLOW	colr.h	745;"	d
XMAGENTA	colr.h	739;"	d
XRED	colr.h	735;"	d
XWHITE	colr.h	741;"	d
XYELLOW	colr.h	737;"	d
YELLOW	colr.h	/^    YELLOW = 3,$/;"	e	enum:BasicValue_t
YELLOW	colr.h	718;"	d
_GNU_SOURCE	colr.h	33;"	d
_GNU_SOURCE	colr_tool.h	17;"	d
_colr	colr.c	/^char* _colr(void *p, ...) {$/;"	f
_colr_join	colr.c	/^char* _colr_join(void *joinerp, ...) {$/;"	f
_rainbow	colr.c	/^char* _rainbow(RGB_fmter fmter, const char* s, double freq, size_t offset) {$/;"	f
alloc_basic	colr.h	167;"	d
alloc_extended	colr.h	175;"	d
alloc_rgb	colr.h	184;"	d
alloc_style	colr.h	192;"	d
argeq	colr.h	203;"	d
back	colr.h	/^    struct ColorArg *back;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
back	colr.h	461;"	d
back_arg	colr.h	481;"	d
back_str	colr.h	500;"	d
basic	colr.h	/^    BasicValue basic;$/;"	m	struct:ColorValue
basic	colr.h	213;"	d
basic_names	colr.c	/^const struct BasicInfo basic_names[] = {$/;"	v	typeref:struct:BasicInfo
basic_names_len	colr.c	/^const size_t basic_names_len = sizeof(basic_names) \/ sizeof(basic_names[0]);$/;"	v
blue	colr.h	/^    unsigned char blue;$/;"	m	struct:RGB
bool_colr_enum	colr.h	226;"	d
char_escape_char	colr.c	/^char char_escape_char(char c) {$/;"	f
char_should_escape	colr.c	/^bool char_should_escape(char c) {$/;"	f
color_arg	colr.h	276;"	d
color_name_is_invalid	colr.h	674;"	d
color_name_is_valid	colr.h	645;"	d
color_val	colr.h	295;"	d
colr	colr.h	571;"	d
colr_empty_str	colr.c	/^char* colr_empty_str(void) {$/;"	f
colr_join	colr.h	598;"	d
colr_repr	colr.h	325;"	d
colr_streq	colr.h	263;"	d
dbug	colr.h	358;"	d
dbug_args	colr_tool.c	/^void dbug_args(char* text, char* fore, char* back, char* style) {$/;"	f
dbug_repr	colr.h	350;"	d
dbug_repr	colr.h	360;"	d
ext	colr.h	/^    ExtendedValue ext;$/;"	m	struct:ColorValue
ext	colr.h	236;"	d
extended_names	colr.c	/^const struct ExtendedInfo extended_names[] = {$/;"	v	typeref:struct:ExtendedInfo
extended_names_len	colr.c	/^const size_t extended_names_len = sizeof(extended_names) \/ sizeof(extended_names[0]);$/;"	v
fore	colr.h	/^    struct ColorArg *fore;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
fore	colr.h	392;"	d
fore_arg	colr.h	410;"	d
fore_str	colr.h	429;"	d
format_bg	colr.c	/^void format_bg(char* out, BasicValue value) {$/;"	f
format_bg_RGB	colr.c	/^void format_bg_RGB(char* out, struct RGB rgb) {$/;"	f
format_bg_RGB_term	colr.c	/^void format_bg_RGB_term(char* out, struct RGB rgb) {$/;"	f
format_bg_rgb	colr.c	/^void format_bg_rgb(char* out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_bgx	colr.c	/^void format_bgx(char* out, unsigned char num) {$/;"	f
format_fg	colr.c	/^void format_fg(char* out, BasicValue value) {$/;"	f
format_fg_RGB	colr.c	/^void format_fg_RGB(char* out, struct RGB rgb) {$/;"	f
format_fg_RGB_term	colr.c	/^void format_fg_RGB_term(char* out, struct RGB rgb) {$/;"	f
format_fg_rgb	colr.c	/^void format_fg_rgb(char* out, unsigned char redval, unsigned char greenval, unsigned char blueval) {$/;"	f
format_fgx	colr.c	/^void format_fgx(char* out, unsigned char num) {$/;"	f
format_style	colr.c	/^void format_style(char* out, StyleValue style) {$/;"	f
green	colr.h	/^    unsigned char green;$/;"	m	struct:RGB
main	colr_tool.c	/^int main(int argc, char* argv[]) {$/;"	f
marker	colr.h	/^    unsigned int marker;$/;"	m	struct:ColorArg
marker	colr.h	/^    unsigned int marker;$/;"	m	struct:ColorText
name	colr.h	/^    char* name;$/;"	m	struct:BasicInfo
name	colr.h	/^    char* name;$/;"	m	struct:ExtendedInfo
name	colr.h	/^    char* name;$/;"	m	struct:StyleInfo
print_256	colr_tool.c	/^int print_256(bool do_fore) {$/;"	f
print_ColorArg_example	colr_tool.h	48;"	d
print_ColorArg_repr	colr_tool.h	39;"	d
print_basic	colr_tool.c	/^int print_basic(bool do_fore) {$/;"	f
print_rainbow_fore	colr_tool.c	/^int print_rainbow_fore(bool term_colors) {$/;"	f
print_rgb	colr_tool.c	/^int print_rgb(bool do_fore) {$/;"	f
print_unrecognized_arg	colr_tool.c	/^void print_unrecognized_arg(const char* userarg) {$/;"	f
print_usage	colr_tool.c	/^int print_usage(const char* reason) {$/;"	f
print_usage_full	colr_tool.c	/^int print_usage_full() {$/;"	f
printferr	colr.h	239;"	d
rainbow_bg	colr.c	/^char* rainbow_bg(const char* s, double freq, size_t offset) {$/;"	f
rainbow_fg	colr.c	/^char* rainbow_fg(const char* s, double freq, size_t offset) {$/;"	f
rainbow_step	colr.c	/^struct RGB rainbow_step(double freq, size_t step) {$/;"	f
rainbow_term_bg	colr.c	/^char* rainbow_term_bg(const char* s, double freq, size_t offset) {$/;"	f
rainbow_term_fg	colr.c	/^char* rainbow_term_fg(const char* s, double freq, size_t offset) {$/;"	f
read_stdin_arg	colr_tool.c	/^char* read_stdin_arg(void) {$/;"	f
red	colr.h	/^    unsigned char red;$/;"	m	struct:RGB
return_on_null	colr_tool.c	12;"	d	file:
rgb	colr.h	/^    struct RGB rgb;$/;"	m	struct:ColorValue	typeref:struct:ColorValue::RGB
rgb	colr.h	251;"	d
rgb_from_hex	colr.c	/^int rgb_from_hex(const char* hexstr, unsigned char* r, unsigned char* g, unsigned char* b) {$/;"	f
rgb_from_str	colr.c	/^int rgb_from_str(const char* arg, unsigned char* r, unsigned char* g, unsigned char* b) {$/;"	f
str_append_reset	colr.c	/^void str_append_reset(char *s) {$/;"	f
str_copy	colr.c	/^char* str_copy(char* dest, const char* src, size_t length) {$/;"	f
str_endswith	colr.c	/^bool str_endswith(const char* str, const char* suf) {$/;"	f
str_has_codes	colr.c	/^bool str_has_codes(const char* s) {$/;"	f
str_is_digits	colr.c	/^bool str_is_digits(const char* s) {$/;"	f
str_lower	colr.c	/^void str_lower(char* s) {$/;"	f
str_repr	colr.c	/^char* str_repr(const char* s) {$/;"	f
str_startswith	colr.c	/^bool str_startswith(const char* s, const char* prefix) {$/;"	f
str_to_lower	colr.c	/^void str_to_lower(char* out, const char* s) {$/;"	f
str_to_wide	colr.c	/^wchar_t* str_to_wide(const char* s) {$/;"	f
style	colr.h	/^    StyleValue style;$/;"	m	struct:ColorValue
style	colr.h	/^    struct ColorArg *style;$/;"	m	struct:ColorText	typeref:struct:ColorText::ColorArg
style	colr.h	519;"	d
style_arg	colr.h	532;"	d
style_names	colr.c	/^const struct StyleInfo style_names[] = {$/;"	v	typeref:struct:StyleInfo
style_names_len	colr.c	/^const size_t style_names_len = sizeof(style_names) \/ sizeof(style_names[0]);$/;"	v
style_str	colr.h	548;"	d
text	colr.h	/^    char* text;$/;"	m	struct:ColorText
type	colr.h	/^    ArgType type;$/;"	m	struct:ColorArg
type	colr.h	/^    ColorType type;$/;"	m	struct:ColorValue
validate_color_arg	colr_tool.c	/^bool validate_color_arg(struct ColorArg carg, const char* name) {$/;"	f
value	colr.h	/^    BasicValue value;$/;"	m	struct:BasicInfo
value	colr.h	/^    ExtendedValue value;$/;"	m	struct:ExtendedInfo
value	colr.h	/^    StyleValue value;$/;"	m	struct:StyleInfo
value	colr.h	/^    struct ColorValue value;$/;"	m	struct:ColorArg	typeref:struct:ColorArg::ColorValue
wide_to_str	colr.c	/^char* wide_to_str(const wchar_t* s) {$/;"	f
